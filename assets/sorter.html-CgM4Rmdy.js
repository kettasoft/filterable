import{_ as n,c as a,a as e,o as t}from"./app-BzrB1Tdi.js";const p={};function i(l,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="sorter" tabindex="-1"><a class="header-anchor" href="#sorter"><span>Sorter</span></a></h1><p>The <strong>Sorter</strong> class provides functionality to manage and apply sorting rules to Eloquent queries. It simplifies the process of sorting models by accepting parameters like field names, directions, aliases, and default sorting. You can also customize the sorting behavior, including handling nulls and multi-field sorting.</p><hr><h3 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h3><p>The <strong>Sorter</strong> class allows developers to configure sorting behavior on Eloquent queries based on user input. You can define allowed sortable fields, set default sorting, create sorting aliases (presets), and customize sorting behaviors such as handling null values and multi-field sorting.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sorter</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sorter</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$sorter</span><span class="token operator">-&gt;</span><span class="token function">allow</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">       <span class="token operator">-&gt;</span><span class="token function">setSortKey</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;sort&#39;</span><span class="token punctuation">)</span></span>
<span class="line">       <span class="token operator">-&gt;</span><span class="token function">setDelimiter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;,&#39;</span><span class="token punctuation">)</span></span>
<span class="line">       <span class="token operator">-&gt;</span><span class="token function">setNullsPosition</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;last&#39;</span><span class="token punctuation">)</span></span>
<span class="line">       <span class="token operator">-&gt;</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="properties" tabindex="-1"><a class="header-anchor" href="#properties"><span>Properties</span></a></h3><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>$allowed</code></td><td><code>array&lt;int, string&gt;</code></td><td>List of allowed fields for sorting.</td></tr><tr><td><code>$default</code></td><td><code>array{0: string, 1: string} or null</code></td><td>Default sorting field and direction (e.g., <code>[&#39;created_at&#39;, &#39;desc&#39;]</code>).</td></tr><tr><td><code>$aliases</code></td><td><code>array&lt;string, array&lt;int, array{0: string, 1: string}&gt;&gt;</code></td><td>Aliases for sorting presets (e.g., <code>[&#39;recent&#39; =&gt; [[&#39;created_at&#39;, &#39;desc&#39;]]]</code>).</td></tr><tr><td><code>$map</code></td><td><code>array&lt;string, string&gt;</code></td><td>Field mapping for input to database columns (e.g., <code>[&#39;name&#39; =&gt; &#39;full_name&#39;]</code>).</td></tr><tr><td><code>$config</code></td><td><code>\\Illuminate\\Support\\Collection</code></td><td>Configuration settings for the sorter.</td></tr><tr><td><code>$sortKey</code></td><td><code>string</code></td><td>The key used for sorting in the request (e.g., <code>sort</code>).</td></tr><tr><td><code>$delimiter</code></td><td><code>string</code></td><td>Delimiter used for multi-field sorting (e.g., <code>,</code>).</td></tr></tbody></table><hr><h3 id="public-methods" tabindex="-1"><a class="header-anchor" href="#public-methods"><span>Public Methods</span></a></h3><hr><h4 id="construct-request-request-array-null-config-null" tabindex="-1"><a class="header-anchor" href="#construct-request-request-array-null-config-null"><span><code>__construct(Request $request, array|null $config = null)</code></span></a></h4><p>Creates a new Sorter instance. Optionally accepts a configuration array.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sorter</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sorter</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="static-make-request-request-array-null-config-null-self" tabindex="-1"><a class="header-anchor" href="#static-make-request-request-array-null-config-null-self"><span><code>static make(Request $request, array|null $config = null): self</code></span></a></h4><p>Static factory method to create a new Sorter instance.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sorter</span> <span class="token operator">=</span> <span class="token class-name static-context">Sorter</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="map-array-fields-self" tabindex="-1"><a class="header-anchor" href="#map-array-fields-self"><span><code>map(array $fields): self</code></span></a></h4><p>Maps input fields to database columns.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sorter</span><span class="token operator">-&gt;</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;full_name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="getfieldmapping-string-field-string" tabindex="-1"><a class="header-anchor" href="#getfieldmapping-string-field-string"><span><code>getFieldMapping(string $field): string</code></span></a></h4><p>Gets the mapped database column for a given input field.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$column</span> <span class="token operator">=</span> <span class="token variable">$sorter</span><span class="token operator">-&gt;</span><span class="token function">getFieldMapping</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="allow-array-fields-self" tabindex="-1"><a class="header-anchor" href="#allow-array-fields-self"><span><code>allow(array $fields): self</code></span></a></h4><p>Defines which fields are allowed for sorting.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sorter</span><span class="token operator">-&gt;</span><span class="token function">allow</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="allowall-self" tabindex="-1"><a class="header-anchor" href="#allowall-self"><span><code>allowAll(): self</code></span></a></h4><p>Allows sorting on all fields (use with caution, may expose sensitive fields).</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sorter</span><span class="token operator">-&gt;</span><span class="token function">allowAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="default-string-field-string-direction-asc-self" tabindex="-1"><a class="header-anchor" href="#default-string-field-string-direction-asc-self"><span><code>default(string $field, string $direction = &#39;asc&#39;): self</code></span></a></h4><p>Defines a default sorting field and direction.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sorter</span><span class="token operator">-&gt;</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="defaults-array-0-string-1-string-defaults-self" tabindex="-1"><a class="header-anchor" href="#defaults-array-0-string-1-string-defaults-self"><span><code>defaults(array{0: string, 1: string} $defaults): self</code></span></a></h4><p>Defines default sorting using an array.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sorter</span><span class="token operator">-&gt;</span><span class="token function">defaults</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="alias-string-name-array-sorting-self" tabindex="-1"><a class="header-anchor" href="#alias-string-name-array-sorting-self"><span><code>alias(string $name, array $sorting): self</code></span></a></h4><p>Defines a sorting alias (preset).</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sorter</span><span class="token operator">-&gt;</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;popular&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;views&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;likes&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="aliases-array-string-array-int-array-0-string-1-string-aliases-self" tabindex="-1"><a class="header-anchor" href="#aliases-array-string-array-int-array-0-string-1-string-aliases-self"><span><code>aliases(array&lt;string, array&lt;int, array{0: string, 1: string}&gt;&gt; $aliases): self</code></span></a></h4><p>Defines multiple sorting aliases (presets).</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sorter</span><span class="token operator">-&gt;</span><span class="token function">aliases</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;popular&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;views&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;likes&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;recent&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="setsortkey-string-key-self" tabindex="-1"><a class="header-anchor" href="#setsortkey-string-key-self"><span><code>setSortKey(string $key): self</code></span></a></h4><p>Sets the key used for sorting in the request.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sorter</span><span class="token operator">-&gt;</span><span class="token function">setSortKey</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;order&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="setdelimiter-string-delimiter-self" tabindex="-1"><a class="header-anchor" href="#setdelimiter-string-delimiter-self"><span><code>setDelimiter(string $delimiter): self</code></span></a></h4><p>Sets the delimiter used for multi-field sorting.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sorter</span><span class="token operator">-&gt;</span><span class="token function">setDelimiter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="setnullsposition-string-null-position-null-self" tabindex="-1"><a class="header-anchor" href="#setnullsposition-string-null-position-null-self"><span><code>setNullsPosition(string|null $position = null): self</code></span></a></h4><p>Sets the position of null values in sorting.</p><ul><li>Accepts: <code>&#39;first&#39;</code>, <code>&#39;last&#39;</code>, or <code>null</code> for default DB behavior.</li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sorter</span><span class="token operator">-&gt;</span><span class="token function">setNullsPosition</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;first&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="apply-builder-query-builder" tabindex="-1"><a class="header-anchor" href="#apply-builder-query-builder"><span><code>apply(Builder $query): Builder</code></span></a></h4><p>Applies the sorting rules to the given Eloquent query.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sorter</span><span class="token operator">-&gt;</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="example-usage" tabindex="-1"><a class="header-anchor" href="#example-usage"><span>Example Usage</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sorter</span> <span class="token operator">=</span> <span class="token class-name static-context">Sorter</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$sorter</span><span class="token operator">-&gt;</span><span class="token function">allow</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">       <span class="token operator">-&gt;</span><span class="token function">setSortKey</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;sort&#39;</span><span class="token punctuation">)</span></span>
<span class="line">       <span class="token operator">-&gt;</span><span class="token function">setDelimiter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;,&#39;</span><span class="token punctuation">)</span></span>
<span class="line">       <span class="token operator">-&gt;</span><span class="token function">setNullsPosition</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;last&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token variable">$sorter</span><span class="token operator">-&gt;</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h3><ul><li><strong><code>Sorter</code></strong> manages the sorting logic for Eloquent queries.</li><li>It allows you to define which fields are sortable, set default sorting, and create sorting aliases.</li><li>Customizable features include sorting with multi-fields, null value handling, and request-based sorting keys.</li></ul>`,74)]))}const r=n(p,[["render",i],["__file","sorter.html.vue"]]),c=JSON.parse('{"path":"/api/sorter.html","title":"Sorter","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":3,"title":"Properties","slug":"properties","link":"#properties","children":[]},{"level":3,"title":"Public Methods","slug":"public-methods","link":"#public-methods","children":[]},{"level":3,"title":"Example Usage","slug":"example-usage","link":"#example-usage","children":[]},{"level":3,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{"updatedTime":1756330220000,"contributors":[{"name":"Abdalrhman Emad Saad","email":"a.emad@codeclouders.com","commits":1}]},"filePathRelative":"api/sorter.md"}');export{r as comp,c as data};
