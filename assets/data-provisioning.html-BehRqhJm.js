import{_ as s,c as a,a as e,o as t}from"./app-BzrB1Tdi.js";const i={};function o(p,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="data-provisioning" tabindex="-1"><a class="header-anchor" href="#data-provisioning"><span>Data Provisioning</span></a></h1><blockquote><p>ðŸš€ Introduced in <strong>v2.7.0</strong></p></blockquote><p>The <strong>Data Provisioning</strong> feature allows you to share and access contextual data across all <code>Filterable</code> instances.<br> It provides a simple way to feed global data â€” such as the authenticated user, current environment, or request context â€” into the filtering system.</p><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>By default, every <code>Filterable</code> instance is isolated.<br> However, sometimes filters need to depend on shared context (e.g., the current user or request data).</p><p>Using the <strong>Data Provisioning</strong> feature, you can inject this context globally so itâ€™s available in all filters.</p><hr><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h2><h3 id="_1-providing-shared-data" tabindex="-1"><a class="header-anchor" href="#_1-providing-shared-data"><span>1. Providing Shared Data</span></a></h3><p>To provide shared data to all <code>Filterable</code> instances, you can use the <code>Filterable::provide()</code> method. This method accepts an array of <strong>key-value</strong> pairs that represent the data you want to share.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Filterable</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>ServiceProvider</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">AppServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token string double-quoted-string">&quot;user&quot;</span> <span class="token operator">=&gt;</span> <span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string double-quoted-string">&quot;environment&quot;</span> <span class="token operator">=&gt;</span> <span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-accessing-provided-data" tabindex="-1"><a class="header-anchor" href="#_2-accessing-provided-data"><span>2. Accessing Provided Data</span></a></h3><p>Once you have provided shared data, you can access it from any <code>Filterable</code> instance using the <code>provided()</code> method.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$filterable</span> <span class="token operator">=</span> <span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$filterable</span><span class="token operator">-&gt;</span><span class="token function">provided</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$environment</span> <span class="token operator">=</span> <span class="token variable">$filterable</span><span class="token operator">-&gt;</span><span class="token function">provided</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;environment&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If your filters depend on the current userâ€™s role or permissions, they can directly access it via <code>$this-&gt;provided(&#39;user&#39;)</code>.</p><h3 id="_3-checking-for-provided-keys" tabindex="-1"><a class="header-anchor" href="#_3-checking-for-provided-keys"><span>3. Checking for Provided Keys</span></a></h3><p>You can check if a specific key has been provided using the <code>hasProvided()</code> method.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$filterable</span> <span class="token operator">=</span> <span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$filterable</span><span class="token operator">-&gt;</span><span class="token function">hasProvided</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Do something with the user</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If the key exists, you can safely retrieve its value using the <code>provided()</code> method.</p><hr><h2 id="methods-reference" tabindex="-1"><a class="header-anchor" href="#methods-reference"><span>Methods Reference</span></a></h2><table><thead><tr><th>Method</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>provide(array $data)</code></td><td>Feed data into the filterable context.</td><td><code>$filterable-&gt;provide([&#39;key&#39; =&gt; &#39;value&#39;]);</code></td></tr><tr><td><code>provided(?string $key = null)</code></td><td>Retrieve one or all provided data items.</td><td><code>$filterable-&gt;provided(&#39;user&#39;);</code></td></tr><tr><td><code>hasProvided(string $key)</code></td><td>Check if a specific key has been provided.</td><td><code>$filterable-&gt;hasProvided(&#39;user&#39;);</code></td></tr></tbody></table><hr><h2 id="benefits" tabindex="-1"><a class="header-anchor" href="#benefits"><span>Benefits</span></a></h2><ul><li>Eliminates repetitive dependency passing.</li><li>Improves filter flexibility and reusability.</li><li>Makes context-aware filtering simpler and cleaner.</li><li>Fully backward-compatible.</li></ul><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>The <strong>Data Provisioning</strong> feature provides a powerful yet simple way to manage shared context across your filtering logic.<br> By centralizing data like the authenticated user, environment details, or request information, you keep your filters clean, decoupled, and easy to test.</p><p>Use this feature whenever your filters depend on external context â€” it ensures your filtering system remains <strong>flexible, expressive, and developer-friendly.</strong></p>`,29)]))}const c=s(i,[["render",o],["__file","data-provisioning.html.vue"]]),r=JSON.parse('{"path":"/features/data-provisioning.html","title":"Data Provisioning","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[{"level":3,"title":"1. Providing Shared Data","slug":"_1-providing-shared-data","link":"#_1-providing-shared-data","children":[]},{"level":3,"title":"2. Accessing Provided Data","slug":"_2-accessing-provided-data","link":"#_2-accessing-provided-data","children":[]},{"level":3,"title":"3. Checking for Provided Keys","slug":"_3-checking-for-provided-keys","link":"#_3-checking-for-provided-keys","children":[]}]},{"level":2,"title":"Methods Reference","slug":"methods-reference","link":"#methods-reference","children":[]},{"level":2,"title":"Benefits","slug":"benefits","link":"#benefits","children":[]},{"level":2,"title":"Conclusion","slug":"conclusion","link":"#conclusion","children":[]}],"git":{"updatedTime":1760975365000,"contributors":[{"name":"kettasoft","email":"kettasoft@gmail.com","commits":1}]},"filePathRelative":"features/data-provisioning.md"}');export{c as comp,r as data};
