import{_ as n,c as a,a as e,o as t}from"./app-Deo94DNs.js";const i={};function l(p,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="sorting" tabindex="-1"><a class="header-anchor" href="#sorting"><span>Sorting</span></a></h1><hr><p>The <code>Sorting</code> feature provides a declarative and customizable way to apply ordering to Eloquent queries via request parameters.</p><p>It allows you to control which fields are sortable, set default sorting behavior, define aliases for complex sorting logic, and decide how multiple fields and null values should be handled.</p><p>You can apply sorting rules locally per filter or register global sorting logic across multiple filters. Sorting can be configured using closures or invokable classes.</p><ul><li>Control which fields are sortable.</li><li>Apply default sorting automatically.</li><li>Use aliases for common sorting patterns.</li><li>Support multiple fields with ascending/descending directions.</li></ul><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h2><p>The sorting behavior is configured using the following options:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token string single-quoted-string">&#39;sorting&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;sort_key&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;sort&#39;</span><span class="token punctuation">,</span> <span class="token comment">// The request key, e.g., ?sort=name</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;allowed&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// List of sortable fields</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;default&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token comment">// [&#39;field&#39;, &#39;direction&#39;]</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;aliases&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// Custom named sort definitions</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;multi_sort&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Enable multi-field sorting</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;delimiter&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Separator for multi-sorting</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;direction_map&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;asc&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;asc&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;desc&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;prefix&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Prefix for descending fields: ?sort=-created_at</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;nulls_position&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token comment">// &#39;first&#39;, &#39;last&#39;, or null (default DB behavior)</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works"><span>How it Works</span></a></h2><ul><li>The request parameter sort controls the sorting.</li><li>Fields are separated by <code>delimiter</code>.</li><li>A leading - means descending order.</li><li>Sorting only applies to fields defined in allow().</li></ul><h2 id="local-sorting" tabindex="-1"><a class="header-anchor" href="#local-sorting"><span>Local Sorting</span></a></h2><p>You can define sorting behavior directly within a filter instance by chaining the <code>sorting()</code> method.</p><p>Example:</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line">GET /posts?sort=title,-id</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Sortable</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$request</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;sort&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;id,title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token class-name static-context">PostFilter</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">sorting</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Sortable</span> <span class="token variable">$sort</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$sort</span><span class="token operator">-&gt;</span><span class="token function">allow</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$posts</span> <span class="token operator">=</span> <span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Use <code>allow()</code> to restrict sortable fields and prevent unauthorized sorting.</p></blockquote><h2 id="global-sorting" tabindex="-1"><a class="header-anchor" href="#global-sorting"><span>Global Sorting</span></a></h2><p>You can register sorting logic globally across multiple filters using <code>Filterable::addSorting()</code>:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Filterable</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Sortable</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">addSorting</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token class-name static-context">ProductFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name static-context">ServiceFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Sortable</span> <span class="token variable">$sort</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$sort</span><span class="token operator">-&gt;</span><span class="token function">allow</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;price&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This approach is ideal when multiple filters share the same sorting rules.</p><h2 id="using-invokable-sort-classes" tabindex="-1"><a class="header-anchor" href="#using-invokable-sort-classes"><span>Using Invokable Sort Classes</span></a></h2><p>Instead of using closures, you can define reusable invokable sorting classes that implement:</p><p>Example:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Sortable<span class="token punctuation">\\</span>Invokable</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Sortable</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">CustomSort</span> <span class="token keyword">implements</span> <span class="token class-name">Invokable</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Sortable</span> <span class="token variable">$sort</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Sortable</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$sort</span><span class="token operator">-&gt;</span><span class="token function">allow</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then use the class:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">PostFilter</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">sorting</span><span class="token punctuation">(</span><span class="token class-name static-context">CustomSort</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="sorting-aliases" tabindex="-1"><a class="header-anchor" href="#sorting-aliases"><span>Sorting Aliases</span></a></h2><p>You can define <strong>aliases</strong> for common or complex sort presets. These aliases can be referenced by name in the query string.</p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example:</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sort</span><span class="token operator">-&gt;</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;recent&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$sort</span><span class="token operator">-&gt;</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;popular&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;views&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;likes&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Then in the URL:</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line">/posts?sort=recent</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="field-mapping" tabindex="-1"><a class="header-anchor" href="#field-mapping"><span>Field Mapping</span></a></h2><p>In cases where the request&#39;s sorting keys do not match your actual database column names, you can use the <code>map()</code> method to translate input fields to their corresponding database columns.</p><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sort</span><span class="token operator">-&gt;</span><span class="token function">allow</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;created&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">     <span class="token operator">-&gt;</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">         <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;user_name&#39;</span><span class="token punctuation">,</span></span>
<span class="line">         <span class="token string single-quoted-string">&#39;created&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, when a request like the following is made:</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line">/users?sort=-created,name</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>It will be translated internally to:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> created_at <span class="token keyword">DESC</span><span class="token punctuation">,</span> user_name <span class="token keyword">ASC</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>✅ This is useful when you want to expose clean or abstract field names via the API, while keeping internal database schema hidden or more flexible.</p></blockquote><div class="hint-container important"><p class="hint-container-title">Important Note</p><p>Make sure any field you map is also included in the <code>allow()</code> list. The mapping only affects column translation — it <strong>does not</strong> automatically validate allowed fields.</p></div><p>✅ Correct</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sort</span><span class="token operator">-&gt;</span><span class="token function">allow</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;created&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;created&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>⚠️ Incorrect</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sort</span><span class="token operator">-&gt;</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;created&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  Incorrect unless &#39;created&#39; is also allowed</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="multi-sorting" tabindex="-1"><a class="header-anchor" href="#multi-sorting"><span>Multi-Sorting</span></a></h2><p>When enabled (<code>multi_sort = true</code>), you can sort by multiple fields:</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line">?sort=name,-created_at</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If disabled, only the first field is considered.</p><p>Use the <code>delimiter</code> option to control the field separator (default is a comma =&gt; ,).</p><hr><h2 id="sorting-direction" tabindex="-1"><a class="header-anchor" href="#sorting-direction"><span>Sorting Direction</span></a></h2><p>Direction is controlled via the <code>direction_map</code> config:</p><ul><li>Prefixing a field with <code>-</code> implies descending order.</li><li>No prefix implies ascending.</li></ul><p>Examples:</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line">?sort=-created_at   # DESC</span>
<span class="line">?sort=name          # ASC</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="nulls-position" tabindex="-1"><a class="header-anchor" href="#nulls-position"><span>Nulls Position</span></a></h2><p>Control how <code>NULL</code> values are ordered using <code>nulls_position</code>:</p><ul><li><code>&#39;first&#39;</code>: Nulls appear before non-nulls.</li><li><code>&#39;last&#39;</code>: Nulls appear after non-nulls.</li><li><code>null</code>: Use database default behavior.</li></ul><p>Example (if supported by DB driver):</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> created_at <span class="token keyword">ASC</span> NULLS <span class="token keyword">LAST</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="customizing-instance-settings" tabindex="-1"><a class="header-anchor" href="#customizing-instance-settings"><span>Customizing Instance Settings</span></a></h2><p>In addition to configuring sorting behavior globally via the config file, you can override certain settings per instance when defining sorting logic — whether locally or globally.</p><p>This provides greater flexibility when different filters require different query keys or behaviors.</p><h3 id="custom-sort-key" tabindex="-1"><a class="header-anchor" href="#custom-sort-key"><span>Custom Sort Key</span></a></h3><p>You can override the default sort key (<code>sort</code>) by calling <code>setSortKey()</code>:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sort</span><span class="token operator">-&gt;</span><span class="token function">setSortKey</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>This will now expect sorting parameters like: /posts?s=title</p></blockquote><hr><h3 id="custom-sorting-delimiter" tabindex="-1"><a class="header-anchor" href="#custom-sorting-delimiter"><span>Custom Sorting Delimiter</span></a></h3><p>You can override the default sorting delimiter (<code>,</code>) by calling <code>setDelimiter()</code>:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sort</span><span class="token operator">-&gt;</span><span class="token function">setDelimiter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;|&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This will now expect sorting parameters like:</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line">/posts?sort=id|title</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>By default, the delimiter used is a comma (<code>,</code>), but using <code>setDelimiter()</code>, you can define a custom separator for multi-field sorting.</p></blockquote><hr><h3 id="custom-nulls-position" tabindex="-1"><a class="header-anchor" href="#custom-nulls-position"><span>Custom NULLs Position</span></a></h3><p>Some databases allow controlling how <code>NULL</code> values are sorted — whether they appear at the beginning or end of the result set.</p><p>You can customize this per instance using <code>setNullsPosition()</code>:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sort</span><span class="token operator">-&gt;</span><span class="token function">setNullsPosition</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;last&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This would result in a query like:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> created_at <span class="token keyword">ASC</span> NULLS <span class="token keyword">LAST</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Depending on your database driver and version. Available options:</p><ul><li>&#39;<strong><code>first</code></strong>&#39; — Puts NULL values at the beginning.</li><li>&#39;<strong><code>last</code></strong>&#39; — Puts NULL values at the end.</li><li><strong><code>null</code></strong> — Uses database default behavior (no explicit NULLS FIRST/LAST clause).</li></ul><div class="hint-container important"><p class="hint-container-title">Note</p><p>Not all databases or database versions support explicit NULLS FIRST/LAST. <strong>Use with caution and test on your environment</strong>.</p></div><hr><h2 id="⚠️-warnings" tabindex="-1"><a class="header-anchor" href="#⚠️-warnings"><span>⚠️ Warnings</span></a></h2><div class="hint-container caution"><p class="hint-container-title">Be careful with <code>$sort-&gt;allow([&#39;*&#39;])</code></p><p>Using the wildcard <code>[&#39;*&#39;]</code> in the <code>allow()</code> method will enable <strong>sorting by all available request fields</strong> — including potentially unsafe or sensitive columns.</p></div><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sort</span><span class="token operator">-&gt;</span><span class="token function">allow</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;*&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Not recommended</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This effectively removes any restriction on what fields users can sort by, which can:</p><ul><li>Allow unintended fields to be sorted (e.g., <code>password</code>, <code>token</code>, etc.).</li><li>Introduce performance issues if users sort on unindexed or non-optimized fields.</li><li>Expose internal schema or data patterns through error messages.</li></ul><blockquote><p>✅ <strong>Recommended:</strong> Always whitelist only the fields you explicitly want to allow.</p></blockquote><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sort</span><span class="token operator">-&gt;</span><span class="token function">allow</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Safe and intentional</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><ul><li>Use <code>sorting()</code> to apply sorting to filters.</li><li>You can use closures or invokable classes.</li><li>Sorting supports multiple fields, default rules, aliases, and null handling.</li><li>All behavior is configurable via the <code>sorting</code> config section.</li></ul>`,103)]))}const c=n(i,[["render",l],["__file","sorting.html.vue"]]),r=JSON.parse('{"path":"/sorting.html","title":"Sorting","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[]},{"level":2,"title":"How it Works","slug":"how-it-works","link":"#how-it-works","children":[]},{"level":2,"title":"Local Sorting","slug":"local-sorting","link":"#local-sorting","children":[]},{"level":2,"title":"Global Sorting","slug":"global-sorting","link":"#global-sorting","children":[]},{"level":2,"title":"Using Invokable Sort Classes","slug":"using-invokable-sort-classes","link":"#using-invokable-sort-classes","children":[]},{"level":2,"title":"Sorting Aliases","slug":"sorting-aliases","link":"#sorting-aliases","children":[{"level":3,"title":"Example:","slug":"example","link":"#example","children":[]}]},{"level":2,"title":"Field Mapping","slug":"field-mapping","link":"#field-mapping","children":[{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]}]},{"level":2,"title":"Multi-Sorting","slug":"multi-sorting","link":"#multi-sorting","children":[]},{"level":2,"title":"Sorting Direction","slug":"sorting-direction","link":"#sorting-direction","children":[]},{"level":2,"title":"Nulls Position","slug":"nulls-position","link":"#nulls-position","children":[]},{"level":2,"title":"Customizing Instance Settings","slug":"customizing-instance-settings","link":"#customizing-instance-settings","children":[{"level":3,"title":"Custom Sort Key","slug":"custom-sort-key","link":"#custom-sort-key","children":[]},{"level":3,"title":"Custom Sorting Delimiter","slug":"custom-sorting-delimiter","link":"#custom-sorting-delimiter","children":[]},{"level":3,"title":"Custom NULLs Position","slug":"custom-nulls-position","link":"#custom-nulls-position","children":[]}]},{"level":2,"title":"⚠️ Warnings","slug":"⚠️-warnings","link":"#⚠️-warnings","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{"updatedTime":1756329094000,"contributors":[{"name":"Abdalrhman Emad Saad","email":"a.emad@codeclouders.com","commits":5}]},"filePathRelative":"sorting.md"}');export{c as comp,r as data};
