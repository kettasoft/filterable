import{_ as e,c as a,a as n,o as t}from"./app-B2UyhwSx.js";const l={};function i(o,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="auto-register-filterable-macro" tabindex="-1"><a class="header-anchor" href="#auto-register-filterable-macro"><span>Auto Register Filterable Macro</span></a></h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>By default, to use the <strong><code>filter()</code></strong> macro on Eloquent models, you must use the HasFilterable trait in each model. However, if you prefer to automatically register the <strong><code>filter()</code></strong> method on all Eloquent builders without modifying individual models, you can use the <strong><code>AutoRegisterFilterableServiceProvider</code></strong>.</p><h3 id="✅-how-to-use" tabindex="-1"><a class="header-anchor" href="#✅-how-to-use"><span>✅ How to Use</span></a></h3><ol><li>Register the Service Provider Open your <code>config/app.php</code> and manually register the service provider:</li></ol><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token string single-quoted-string">&#39;providers&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token comment">// Other service providers...</span></span>
<span class="line">    <span class="token class-name class-name-fully-qualified static-context">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Providers<span class="token punctuation">\\</span>AutoRegisterFilterableServiceProvider</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Remove the Trait (Optional) You can now remove the HasFilterable trait from your Eloquent models:</li></ol><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// No need for HasFilterable trait</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Use the Filter Method Use the <code>filter()</code> macro like this, even without using the trait:</li></ol><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name static-context">UserFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Or if the model defines the $filterable property:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$filterable</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>App<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>UserFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="⚠️-when-should-you-use-it" tabindex="-1"><a class="header-anchor" href="#⚠️-when-should-you-use-it"><span>⚠️ When Should You Use It?</span></a></h3><ul><li>✅ You want zero setup per model.</li><li>✅ You prefer centralized control over all query filtering.</li><li>❌ You want explicit opt-in per model using HasFilterable.</li></ul>`,14)]))}const r=e(l,[["render",i],["__file","auto-register-filterable-macro.html.vue"]]),c=JSON.parse('{"path":"/features/auto-register-filterable-macro.html","title":"Auto Register Filterable Macro","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[{"level":3,"title":"✅ How to Use","slug":"✅-how-to-use","link":"#✅-how-to-use","children":[]},{"level":3,"title":"⚠️ When Should You Use It?","slug":"⚠️-when-should-you-use-it","link":"#⚠️-when-should-you-use-it","children":[]}]}],"git":{"updatedTime":1753707186000,"contributors":[{"name":"Abdalrhman Emad Saad","email":"a.emad@codeclouders.com","commits":1}]},"filePathRelative":"features/auto-register-filterable-macro.md"}');export{r as comp,c as data};
