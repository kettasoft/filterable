import{_ as s,c as a,a as e,o as t}from"./app-DyOzjmXU.js";const p={};function i(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="request-validation" tabindex="-1"><a class="header-anchor" href="#request-validation"><span>Request validation</span></a></h1><div class="hint-container caution"><p class="hint-container-title">Important Note</p><p>All filter engines in this package support <strong>automatic request validation</strong>, except for the <a href="/engines/closure" target="_blank" rel="noopener noreferrer"><strong>Closure Pipeline Engine</strong></a></p></div><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>When using class-based filters (e.g., in the <strong><a href="/engines/dynamic-methods" target="_blank" rel="noopener noreferrer">Dynamic Method Engine</a></strong>). you may define validation rules directly inside the filter class using <code>protected $rules</code> property. These rules follow Laravel&#39;s native validation format.</p><p>Before any filtering logic runs, the engine will validate incomming request data against the defined rules.</p><ul><li>If validation <strong>passes</strong>, filtering proceeds as expected.</li><li>If validation fails, a <br><strong><code>ValidationException</code></strong> is thrown and the process stoped.</li></ul><hr><h2 id="supported-engines" tabindex="-1"><a class="header-anchor" href="#supported-engines"><span>Supported Engines</span></a></h2><table><thead><tr><th>Engine</th><th>Validation Support</th></tr></thead><tbody><tr><td><a href="/engines/ruelset" target="_blank" rel="noopener noreferrer"><code>Ruelset</code></a></td><td><strong>Yes</strong></td></tr><tr><td><a href="/engines/dynamic-methods" target="_blank" rel="noopener noreferrer"><code>Dynamic method</code></a></td><td><strong>Yes</strong></td></tr><tr><td><a href="/engines/tree-based" target="_blank" rel="noopener noreferrer"><code>Tree based</code></a></td><td><strong>Yes</strong></td></tr><tr><td><a href="/engines/closure" target="_blank" rel="noopener noreferrer"><code>Closure pipeline</code></a></td><td><strong>No</strong></td></tr><tr><td>Others (if any)</td><td><strong>Yes</strong></td></tr></tbody></table><hr><h2 id="example-dynamic-method-engine" tabindex="-1"><a class="header-anchor" href="#example-dynamic-method-engine"><span>Example (Dynamic Method Engine)</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">PostFilter</span> <span class="token keyword">extends</span> <span class="token class-name">Filterable</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Registered filters to operate upon.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">array</span></span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$filters</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;status&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;status&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;required&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;in:pending,active&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;required&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;max:32&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Filter the query by a given status.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name">Payload</span> <span class="token parameter">$payload</span></span>
<span class="line">     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">status</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;status&#39;</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Filter the query by a given title.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name">Payload</span> <span class="token parameter">$payload</span></span>
<span class="line">     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">title</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling"><span>Error Handling</span></a></h2><p>If the request does not satisfy the rules, the system will return a structured error.</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;The given data was invalid.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;errors&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;The status field is required.&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;The title field is required.&quot;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15)]))}const c=s(p,[["render",i],["__file","validation.html.vue"]]),r=JSON.parse('{"path":"/validation.html","title":"Request validation","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"Supported Engines","slug":"supported-engines","link":"#supported-engines","children":[]},{"level":2,"title":"Example (Dynamic Method Engine)","slug":"example-dynamic-method-engine","link":"#example-dynamic-method-engine","children":[]},{"level":2,"title":"Error Handling","slug":"error-handling","link":"#error-handling","children":[]}],"git":{"updatedTime":1747728168000,"contributors":[{"name":"Abdalrhman Emad Saad","email":"a.emad@codeclouders.com","commits":1}]},"filePathRelative":"validation.md"}');export{c as comp,r as data};
