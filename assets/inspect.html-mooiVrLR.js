import{_ as s,c as n,a,o as l}from"./app-o4hQ8xdO.js";const i={};function t(r,e){return l(),n("div",null,e[0]||(e[0]=[a(`<h1 id="inspecting-filterable-classes" tabindex="-1"><a class="header-anchor" href="#inspecting-filterable-classes"><span>Inspecting Filterable Classes</span></a></h1><h3 id="purpose" tabindex="-1"><a class="header-anchor" href="#purpose"><span><strong>Purpose</strong></span></a></h3><p>The <code>filterable:inspect</code> command allows you to <strong>analyze and inspect</strong> the configuration of a specific Filterable class. It displays a summary of the filter’s settings — including its model, allowed fields and operators, data provisioning, validation rules, and more.</p><p>This is particularly useful for debugging or understanding how a filter is configured internally.</p><hr><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span><strong>Usage</strong></span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">php artisan filterable:inspect <span class="token punctuation">{</span>filter<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments"><span><strong>Arguments</strong></span></a></h3><table><thead><tr><th>Argument</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>filter</code></td><td>The Filterable class name or alias you want to inspect.</td><td><code>php artisan filterable:inspect PostFilter</code></td></tr></tbody></table><hr><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span><strong>Example</strong></span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">php artisan filterable:inspect PostFilter</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Output Example:</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">🔍 Inspecting: App\\Http\\Filters\\PostFilter</span>
<span class="line"></span>
<span class="line">┌────────────────────────────┬──────────────────────────────────────────────┐</span>
<span class="line">│ Property                   │ Value                                        │</span>
<span class="line">├────────────────────────────┼──────────────────────────────────────────────┤</span>
<span class="line">│ Model                      │ Post                                         │</span>
<span class="line">│ Allowed Fields             │ title, content, status                       │</span>
<span class="line">│ Allowed Operators          │ =, !=, like, in                              │</span>
<span class="line">│ Provided Data              │ user, request                                │</span>
<span class="line">│ Ignored Empty Value        │ Yes                                          │</span>
<span class="line">│ Strict Mode                │ No                                           │</span>
<span class="line">│ Engine                     │ Invokable                                    │</span>
<span class="line">│ Has Sanitizers             │ Yes                                          │</span>
<span class="line">│ Request Source             │ query                                        │</span>
<span class="line">│ Request Key                │ filters                                      │</span>
<span class="line">│ Validation Roles           │ title, status                                │</span>
<span class="line">└────────────────────────────┴──────────────────────────────────────────────┘</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="features" tabindex="-1"><a class="header-anchor" href="#features"><span><strong>Features</strong></span></a></h3><ul><li>Displays <strong>all configuration details</strong> of a Filterable class in a clear table.</li><li>Supports both <strong>full class names</strong> (e.g. <code>App\\Http\\Filters\\PostFilter</code>) and <strong>simple names</strong> (e.g. <code>PostFilter</code>).</li><li>Highlights important properties (like strict mode, sanitizers, etc.) using color for quick recognition.</li><li>Useful for <strong>debugging misconfigurations</strong> or <strong>verifying filter behavior</strong>.</li></ul><hr><h3 id="common-use-cases" tabindex="-1"><a class="header-anchor" href="#common-use-cases"><span><strong>Common Use Cases</strong></span></a></h3><ul><li>Checking which fields and operators are currently allowed for a given filter.</li><li>Debugging unexpected filter behavior due to configuration mismatches.</li><li>Verifying data provisioning or engine setup.</li><li>Inspecting filters created by other developers on your team.</li></ul><hr><h3 id="notes" tabindex="-1"><a class="header-anchor" href="#notes"><span><strong>Notes</strong></span></a></h3><ul><li>The command requires that the given class <strong>extends <code>Kettasoft\\Filterable\\Filterable</code></strong>.</li><li>If the class cannot be found or is not a subclass of <code>Filterable</code>, the command will show an error message.</li><li>Works seamlessly with filters stored under <code>app/Http/Filters</code> (by default).</li></ul><hr><h3 id="sample-error" tabindex="-1"><a class="header-anchor" href="#sample-error"><span><strong>Sample Error</strong></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Filter class [UnknownFilter] not found.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,27)]))}const d=s(i,[["render",t],["__file","inspect.html.vue"]]),c=JSON.parse('{"path":"/cli/inspect.html","title":"Inspecting Filterable Classes","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Purpose","slug":"purpose","link":"#purpose","children":[]},{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":3,"title":"Arguments","slug":"arguments","link":"#arguments","children":[]},{"level":3,"title":"Example","slug":"example","link":"#example","children":[]},{"level":3,"title":"Features","slug":"features","link":"#features","children":[]},{"level":3,"title":"Common Use Cases","slug":"common-use-cases","link":"#common-use-cases","children":[]},{"level":3,"title":"Notes","slug":"notes","link":"#notes","children":[]},{"level":3,"title":"Sample Error","slug":"sample-error","link":"#sample-error","children":[]}],"git":{"updatedTime":1761371878000,"contributors":[{"name":"kettasoft","email":"kettasoft@gmail.com","commits":1}]},"filePathRelative":"cli/inspect.md"}');export{d as comp,c as data};
