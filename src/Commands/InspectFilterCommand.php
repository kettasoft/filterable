<?php

namespace Kettasoft\Filterable\Commands;

use Illuminate\Console\Command;
use Kettasoft\Filterable\Filterable;
use Kettasoft\Filterable\Commands\Concerns\CommandHelpers;

/**
 * Command to inspect the configuration and structure of a specific Filterable class.
 * 
 * This command allows users to provide a Filterable class name or alias and
 * retrieves detailed information about its configuration, including allowed fields,
 * operators, and the underlying model. It can also optionally display the SQL
 * query generated by the filter.
 * 
 * @package Kettasoft\Filterable\Commands
 */
class InspectFilterCommand extends Command
{
    use CommandHelpers;

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'filterable:inspect {filter : The Filterable class or name}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Inspect the configuration and structure of a specific Filterable class.';

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $filterInput = $this->argument('filter');
        $filterClass = $this->resolveFilterClass($filterInput);

        if (!$filterClass || !class_exists($filterClass) || !is_subclass_of($filterClass, Filterable::class)) {
            $this->error(sprintf("Filter class [%s] not found or is not a subclass of Kettasoft\Filterable\Filterable.", $filterClass));
            return Command::FAILURE;
        }

        $instance = new $filterClass();

        $this->info("🔍 Inspecting: $filterClass");
        $this->line('');

        $this->table(['Property', 'Value'], [
            ['Model', $this->getModel($instance)],
            ['Allowed Fields', implode(', ', $instance->getAllowedFields() ?? []) ?: 'N/A'],
            ['Allowed Operators', implode(', ', $instance->getAllowedOperators() ?? []) ?: 'N/A'],
            ['Provided Data', implode(', ', $this->getProvidedData($instance)) ?: 'N/A'],
            ['Ignored Empty Value', $instance->hasIgnoredEmptyValues() ? $this->highlight('Yes', 'green') : $this->highlight('No', 'red')],
            ['Strict Mode', $instance->isStrict() ? $this->highlight('Yes', 'green') : $this->highlight('No', 'red')],
            ['Engine', $this->getEngine($instance) ?: 'N/A'],
            ['Has Sanitizers', $instance->getSanitizerInstance()->count() ? $this->highlight('Yes', 'green') : $this->highlight('No', 'red')],
            ['Request Source', $instance->getRequestSource() ?: 'N/A'],
            ['Request Key', $instance->getFilterKey() ?: 'N/A'],
            ['Validation Roles', implode(', ', array_keys($instance->rules())) ?: 'N/A'],
        ], 'box-double');

        return Command::SUCCESS;
    }
}
