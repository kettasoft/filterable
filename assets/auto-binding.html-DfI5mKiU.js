import{_ as a,c as n,a as e,o as t}from"./app-o4hQ8xdO.js";const l={};function i(p,s){return t(),n("div",null,s[0]||(s[0]=[e(`<h1 id="auto-binding-filter-class-in-models" tabindex="-1"><a class="header-anchor" href="#auto-binding-filter-class-in-models"><span>Auto Binding Filter Class in Models</span></a></h1><p>You can now define a default filter class directly inside your model by setting the <code>$filterable</code> property.</p><p>This allows the <code>filter()</code> method to automatically resolve the corresponding filter class without having to explicitly pass it.</p><h2 id="âœ¨-usage" tabindex="-1"><a class="header-anchor" href="#âœ¨-usage"><span>âœ¨ Usage</span></a></h2><p>Inside your Eloquent model, define a <code>$filterable</code> property and assign the class name of your filter:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Models</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>HasFilterable</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">use</span> <span class="token package">HasFilterable</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$filterable</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>UserFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, when calling the filter() method, you no longer need to provide the filter class manually:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The package will automatically resolve and use the UserFilter class defined in the model.</p><h2 id="ðŸ§ -notes" tabindex="-1"><a class="header-anchor" href="#ðŸ§ -notes"><span>ðŸ§  Notes</span></a></h2><ul><li>If no $filterable is set on the model, you will still need to pass the filter class manually to filter().</li><li>This feature works nicely with your existing filter engines and aliases.</li></ul><h2 id="âœ…-benefits" tabindex="-1"><a class="header-anchor" href="#âœ…-benefits"><span>âœ… Benefits</span></a></h2><ul><li>Cleaner, shorter code.</li><li>Better encapsulation.</li><li>Each model manages its own filtering logic.</li></ul>`,13)]))}const c=a(l,[["render",i],["__file","auto-binding.html.vue"]]),r=JSON.parse('{"path":"/features/auto-binding.html","title":"Auto Binding Filter Class in Models","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"âœ¨ Usage","slug":"âœ¨-usage","link":"#âœ¨-usage","children":[]},{"level":2,"title":"ðŸ§  Notes","slug":"ðŸ§ -notes","link":"#ðŸ§ -notes","children":[]},{"level":2,"title":"âœ… Benefits","slug":"âœ…-benefits","link":"#âœ…-benefits","children":[]}],"git":{"updatedTime":1753705944000,"contributors":[{"name":"Abdalrhman Emad Saad","email":"a.emad@codeclouders.com","commits":1}]},"filePathRelative":"features/auto-binding.md"}');export{c as comp,r as data};
