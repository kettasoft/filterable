import{_ as n,c as a,a as e,o as t}from"./app-C_cxxTRp.js";const l={};function p(i,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="invokable-engine" tabindex="-1"><a class="header-anchor" href="#invokable-engine"><span>Invokable Engine</span></a></h1><p>The <strong>Invokable Engine</strong> provides a powerful way to dynamically map incomming reuqest parameters to corresponding methods in a filter class. This mechanism enables clean, scalable filtering logic and behavior injection without requiring large <strong>switch</strong> or <strong>if-else</strong> blocks.</p><hr><h2 id="purpose" tabindex="-1"><a class="header-anchor" href="#purpose"><span>Purpose</span></a></h2><p>To automatically execute soecific methods in a filter class based on the incomming request keys, Each key in the request is matched with a method of the same name in the filter class and registered in <strong><code>$filters</code></strong> property, and the method is executed with the provided value.</p><hr><h2 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works"><span>How It Works</span></a></h2><ol><li>The request is parsed and filtered keys are extracted.</li><li>A filter class contains defined methods matching possible request keys.</li><li>The engine loops over each request key.</li><li>If a method exists in the filter class matching the key and registered in <strong><code>$filters</code></strong> property, It is invoked with the value.</li><li>The filter class returns the modified query or resource.</li></ol><hr><h2 id="example-use-case" tabindex="-1"><a class="header-anchor" href="#example-use-case"><span>Example Use case</span></a></h2><h4 id="incomming-request" tabindex="-1"><a class="header-anchor" href="#incomming-request"><span>Incomming Request</span></a></h4><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line">GET /api/posts?status=pending&amp;title=PHP</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="filter-class" tabindex="-1"><a class="header-anchor" href="#filter-class"><span>Filter Class</span></a></h4><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Filters</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Abstracts<span class="token punctuation">\\</span>Filterable</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Payload</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">PostFilter</span> <span class="token keyword">extends</span> <span class="token class-name">Filterable</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$filters</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;status&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">    * Filter the query by title.</span>
<span class="line">    *</span>
<span class="line">    * <span class="token keyword">@param</span> <span class="token class-name">Payload</span> <span class="token parameter">$payload</span></span>
<span class="line">    * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span></span>
<span class="line">    */</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">title</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Payload</span> <span class="token variable">$payload</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;like&#39;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;%<span class="token interpolation"><span class="token variable">$payload</span></span>%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">    * Filter the query by status.</span>
<span class="line">    *</span>
<span class="line">    * <span class="token keyword">@param</span> <span class="token class-name">Payload</span> <span class="token parameter">$payload</span></span>
<span class="line">    * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span></span>
<span class="line">    */</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">status</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Payload</span> <span class="token variable">$payload</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token property">value</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;active&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;pending&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;stopped&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;status&#39;</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$posts</span> <span class="token operator">=</span> <span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name static-context">PostFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">paginate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="supporting-arbitrary-operators" tabindex="-1"><a class="header-anchor" href="#supporting-arbitrary-operators"><span>Supporting Arbitrary Operators</span></a></h2><p>You can access not only the raw value but also the parsed operator (e.g. =, like, &gt;, etc.) by type‑hinting the special Payload DTO in your filter methods. The engine will build an <strong><code>Payload</code></strong> instance for you containing:</p><ul><li><code>field</code> – the column name</li><li><code>operator</code> – the parsed operator (from your ruleset or SQL‐expression config)</li><li><code>value</code> – the sanitized filter value</li><li><code>beforeSanitize</code> – the original raw input</li></ul><h2 id="mapping-request-keys" tabindex="-1"><a class="header-anchor" href="#mapping-request-keys"><span>Mapping Request Keys</span></a></h2><p>By default, the engine attempts to match the reuqest keys directly to metch names in the filter class. However, for mode flexibility and clarity, you can define a custom map that links request keys to specific method names.</p><p>This allows you to:</p><ul><li>Use more user-friendly request parameters.</li><li>Decouple internal method names from public <code>API</code> keys..</li><li>Refactor method names without affecting the frontend or query layer.</li></ul><hr><h3 id="example-with-custom-map" tabindex="-1"><a class="header-anchor" href="#example-with-custom-map"><span>Example with Custom Map</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Filters</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Abstracts<span class="token punctuation">\\</span>Filterable</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">PostFilter</span> <span class="token keyword">extends</span> <span class="token class-name">Filterable</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$filters</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;joined&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;status&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$mentors</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string single-quoted-string">&#39;joined&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;filterByJoined&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string single-quoted-string">&#39;status&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;filterByStatus&#39;</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Filter the query by joined.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name">Payload</span> <span class="token parameter">$payload</span></span>
<span class="line">     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">filterByJoined</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Payload</span> <span class="token variable">$payload</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">whereDate</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;joined&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Filter the query by status.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">|</span><span class="token keyword">int</span></span> Payload $payload</span>
<span class="line">     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">filterByStatus</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Payload</span> <span class="token variable">$payload</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;status&#39;</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="request" tabindex="-1"><a class="header-anchor" href="#request"><span>Request</span></a></h4><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line">GET /api/users?status=1&amp;joined=2023-01-01,2023-12-31</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="explanation" tabindex="-1"><a class="header-anchor" href="#explanation"><span>Explanation</span></a></h4><ul><li>status is mapped to filterByStatus()</li><li>joined is mapped to filterByJoined()</li></ul><hr><h4 id="automatic-fallback" tabindex="-1"><a class="header-anchor" href="#automatic-fallback"><span>Automatic Fallback</span></a></h4><p>If the <strong><code>$mentors</code></strong> array is empty (or not defined), the engine will automatically try to match request keys to methods by name.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// If no map defined:</span></span>
<span class="line"><span class="token string single-quoted-string">&#39;status&#39;</span> <span class="token operator">=&gt;</span> calls method <span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token string single-quoted-string">&#39;joined&#39;</span> <span class="token operator">=&gt;</span> calls method <span class="token function">joined</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This ensures that the filter system remains dynamic and flexible whether or not a custom map is used.</p><hr><h3 id="key-features" tabindex="-1"><a class="header-anchor" href="#key-features"><span>Key Features</span></a></h3><ul><li><strong>Convention over configuration:</strong> Method names match request keys.</li><li><strong>Safe execution:</strong> Only existing methods and registered filter keys in <strong><code>$filters</code></strong> are called.</li><li><strong>Flexable extension:</strong> Add or override logic in the filter class easily.</li><li><strong>Clean query builder:</strong> Keeps container logic slim and readable.</li></ul><hr><h3 id="lifecycle" tabindex="-1"><a class="header-anchor" href="#lifecycle"><span>Lifecycle</span></a></h3><ol><li><p>Controller recevies request.</p></li><li><p>$request-&gt;only([...]) extracts relevent filters.</p></li><li><p>Filter class loops over keys.</p></li><li><p>For each key:</p><ul><li>if a method named <strong><code>$key</code></strong> exists and registered in <strong><code>$filters</code></strong> property, is is executed with the value.</li></ul></li><li><p>Modified Eloquent query is returned.</p></li></ol><hr><h3 id="example-flow-diagram" tabindex="-1"><a class="header-anchor" href="#example-flow-diagram"><span>Example Flow Diagram</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">[ Request ]</span>
<span class="line">    |</span>
<span class="line">    v</span>
<span class="line">[ Extract Filters ] ---&gt; [ [&#39;status&#39; =&gt; &#39;pending&#39;, &#39;title&#39; =&gt; &#39;PHP&#39;] ]</span>
<span class="line">    |</span>
<span class="line">    v</span>
<span class="line">[ PostFilter ]</span>
<span class="line">    - Checks: method_exists(&#39;status&#39;) &amp;&amp; in_array($this-&gt;filters, &#39;status&#39;)</span>
<span class="line">        - Calls: status(&#39;pending&#39;)  --&gt; $query-&gt;where(&#39;status&#39;, &#39;pending&#39;)</span>
<span class="line">    - Checks: method_exists(&#39;title&#39;) &amp;&amp; in_array($this-&gt;filters, &#39;title&#39;)</span>
<span class="line">        - Calls: title(&#39;PHP&#39;)      --&gt; $query-&gt;where(&#39;is_title&#39;, &#39;PHP&#39;)</span>
<span class="line">    |</span>
<span class="line">    v</span>
<span class="line">[ Modified Query ]</span>
<span class="line">    |</span>
<span class="line">    v</span>
<span class="line">[ Controller returns results ]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="advanced-usage" tabindex="-1"><a class="header-anchor" href="#advanced-usage"><span><strong>Advanced Usage</strong></span></a></h3><h4 id="support-for-multiple-arguments" tabindex="-1"><a class="header-anchor" href="#support-for-multiple-arguments"><span>Support for Multiple Arguments</span></a></h4><p>You can modify the methods to accept multiple values:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">created_between</span><span class="token punctuation">(</span><span class="token variable">$dates</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">query</span><span class="token operator">-&gt;</span><span class="token function">whereBetween</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token variable">$dates</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span><strong>Best Practices</strong></span></a></h3><ul><li>Always validate input before applying filters.</li><li>Use camelCase or snake_case consistently.</li><li>Consider using a base filter class to share logic.</li><li>Document available filters using PHPDoc or auto-generating from method names.</li></ul>`,51)]))}const o=n(l,[["render",p],["__file","invokable.html.vue"]]),r=JSON.parse('{"path":"/engines/invokable.html","title":"Invokable Engine","lang":"en-US","frontmatter":{"sidebarDepth":2},"headers":[{"level":2,"title":"Purpose","slug":"purpose","link":"#purpose","children":[]},{"level":2,"title":"How It Works","slug":"how-it-works","link":"#how-it-works","children":[]},{"level":2,"title":"Example Use case","slug":"example-use-case","link":"#example-use-case","children":[]},{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":2,"title":"Supporting Arbitrary Operators","slug":"supporting-arbitrary-operators","link":"#supporting-arbitrary-operators","children":[]},{"level":2,"title":"Mapping Request Keys","slug":"mapping-request-keys","link":"#mapping-request-keys","children":[{"level":3,"title":"Example with Custom Map","slug":"example-with-custom-map","link":"#example-with-custom-map","children":[]},{"level":3,"title":"Key Features","slug":"key-features","link":"#key-features","children":[]},{"level":3,"title":"Lifecycle","slug":"lifecycle","link":"#lifecycle","children":[]},{"level":3,"title":"Example Flow Diagram","slug":"example-flow-diagram","link":"#example-flow-diagram","children":[]},{"level":3,"title":"Advanced Usage","slug":"advanced-usage","link":"#advanced-usage","children":[]},{"level":3,"title":"Best Practices","slug":"best-practices","link":"#best-practices","children":[]}]}],"git":{"updatedTime":1748577829000,"contributors":[{"name":"Abdalrhman Emad Saad","email":"a.emad@codeclouders.com","commits":1}]},"filePathRelative":"engines/invokable.md"}');export{o as comp,r as data};
