import{_ as a,c as n,a as e,o as t}from"./app-j_kFXNel.js";const p={};function l(i,s){return t(),n("div",null,s[0]||(s[0]=[e(`<h1 id="payload" tabindex="-1"><a class="header-anchor" href="#payload"><span>Payload</span></a></h1><p>The <strong>Payload</strong> class is a lightweight data wrapper used to represent a single filter input.<br> It normalizes values, provides utility methods, and makes it easier to work with common patterns such as wildcard search, JSON detection, boolean casting, and more.</p><hr><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>When you define filters inside a <code>Filterable</code> class, the filter method receives a <code>Payload</code> object instead of a raw value.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">PostFilter</span> <span class="token keyword">extends</span> <span class="token class-name">Filterable</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$filters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">title</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Payload</span> <span class="token variable">$payload</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;like&#39;</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties"><span>Properties</span></a></h2><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>$field</code></td><td><code>string</code></td><td>The field passed from the request.</td></tr><tr><td><code>$operator</code></td><td><code>string</code></td><td>The operator passed from the request.</td></tr><tr><td><code>$value</code></td><td><code>mixed</code></td><td>The raw value passed from the request.</td></tr><tr><td><code>$beforeSanitize</code></td><td><code>mixed</code></td><td>The original value before sanitizing.</td></tr></tbody></table><hr><h2 id="public-methods" tabindex="-1"><a class="header-anchor" href="#public-methods"><span>Public Methods</span></a></h2><h3 id="tostring-string" tabindex="-1"><a class="header-anchor" href="#tostring-string"><span><code>__toString(): string</code></span></a></h3><p>Returns the value as string.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$payload</span><span class="token punctuation">;</span> <span class="token comment">// equivalent to $payload-&gt;value</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="setvalue-mixed-value-payload" tabindex="-1"><a class="header-anchor" href="#setvalue-mixed-value-payload"><span><code>setValue(mixed $value): Payload</code></span></a></h3><p>Set a new value for the payload and return the updated instance.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="length-int" tabindex="-1"><a class="header-anchor" href="#length-int"><span><code>length(): int</code></span></a></h3><p>Get the length of the value.<br> Dealing with <code>array</code> or <code>string</code></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// skip filter</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="isempty-bool" tabindex="-1"><a class="header-anchor" href="#isempty-bool"><span><code>isEmpty(): bool</code></span></a></h3><p>Check if the value is empty (<code>null</code>, <code>&quot;&quot;</code>, or whitespace).</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// skip filter</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="isnotempty-bool" tabindex="-1"><a class="header-anchor" href="#isnotempty-bool"><span><code>isNotEmpty(): bool</code></span></a></h3><p>Check if the value is not empty (<code>filterable</code>, <code>[&#39;one&#39;, &#39;tow&#39;]</code>, or any data).</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// appliy filter</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="isnull-bool" tabindex="-1"><a class="header-anchor" href="#isnull-bool"><span><code>isNull(): bool</code></span></a></h3><p>Check if the value is null.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// skip filter</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="isjson-bool" tabindex="-1"><a class="header-anchor" href="#isjson-bool"><span><code>isJson(): bool</code></span></a></h3><p>Check if the payload is a valid JSON string.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">isJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token property">value</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="asboolean-bool-null" tabindex="-1"><a class="header-anchor" href="#asboolean-bool-null"><span><code>asBoolean(): bool|null</code></span></a></h3><p>Convert value to boolean.<br> Supports <code>&quot;true&quot;</code>, <code>&quot;false&quot;</code>, <code>&quot;1&quot;</code>, <code>&quot;0&quot;</code>, <code>&quot;yes&quot;</code>, <code>&quot;no&quot;</code>.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">asBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true or false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="aslike-string-side-both-string" tabindex="-1"><a class="header-anchor" href="#aslike-string-side-both-string"><span><code>asLike(string $side = &quot;both&quot;): string</code></span></a></h3><p>Wrap the value with <code>%</code> for SQL <code>LIKE</code> queries.</p><ul><li><code>both</code> → <code>%value%</code></li><li><code>left</code> → <code>%value</code></li><li><code>right</code> → <code>value%</code></li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;like&#39;</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">asLike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// WHERE title LIKE &quot;%keyword%&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="asint-int" tabindex="-1"><a class="header-anchor" href="#asint-int"><span><code>asInt(): int</code></span></a></h3><p>Cast value to integer.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">asInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="raw-mixed" tabindex="-1"><a class="header-anchor" href="#raw-mixed"><span><code>raw(): mixed</code></span></a></h3><p>Get the original unmodified value.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// equivalent to $payload-&gt;beforeSanitize</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="isnumeric-bool" tabindex="-1"><a class="header-anchor" href="#isnumeric-bool"><span><code>isNumeric(): bool</code></span></a></h3><p>Check if the value is numeric.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="isstring-bool" tabindex="-1"><a class="header-anchor" href="#isstring-bool"><span><code>isString(): bool</code></span></a></h3><p>Check if the value is string.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="isarray-bool" tabindex="-1"><a class="header-anchor" href="#isarray-bool"><span><code>isArray(): bool</code></span></a></h3><p>Check if the value is array.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;in&#39;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="istrue-bool" tabindex="-1"><a class="header-anchor" href="#istrue-bool"><span><code>isTrue(): bool</code></span></a></h3><p>Check if the value is <code>true</code>.<br> Supports <code>&quot;true&quot;</code>, <code>&quot;1&quot;</code>, <code>&quot;yes&quot;</code>.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="isfalse-bool" tabindex="-1"><a class="header-anchor" href="#isfalse-bool"><span><code>isFalse(): bool</code></span></a></h3><p>Check if the value is <code>false</code>.<br> Supports <code>&quot;false&quot;</code>, <code>&quot;0&quot;</code>, <code>&quot;no&quot;</code>, <code>&quot;&quot;</code>.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">isFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="asarray-array" tabindex="-1"><a class="header-anchor" href="#asarray-array"><span><code>asArray(): array</code></span></a></h3><p>If the value is a valid JSON string representing an array/object, it will be decoded into an array. If the value is already an array, it will be returned directly. Otherwise returns null.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">asArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="toarray-array" tabindex="-1"><a class="header-anchor" href="#toarray-array"><span><code>toArray(): array</code></span></a></h3><p>Get the instance as an array</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">  [</span>
<span class="line">    &quot;field&quot; =&gt; &quot;status&quot;,</span>
<span class="line">    &quot;operator&quot; =&gt; &quot;=&quot;,</span>
<span class="line">    &quot;value&quot; =&gt; &quot;filterable&quot;</span>
<span class="line">  ]</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="tojson-string" tabindex="-1"><a class="header-anchor" href="#tojson-string"><span><code>toJson(): string</code></span></a></h3><p>Get the instance as an json string</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">  [</span>
<span class="line">    &quot;field&quot; =&gt; &quot;status&quot;,</span>
<span class="line">    &quot;operator&quot; =&gt; &quot;=&quot;,</span>
<span class="line">    &quot;value&quot; =&gt; &quot;filterable&quot;</span>
<span class="line">  ]</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="example-usage" tabindex="-1"><a class="header-anchor" href="#example-usage"><span>Example Usage</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">status</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Payload</span> <span class="token variable">$payload</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;is_active&#39;</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">asBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">category</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Payload</span> <span class="token variable">$payload</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;category_id&#39;</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">asInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">meta</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Payload</span> <span class="token variable">$payload</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">isJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">whereJsonContains</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;meta&#39;</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token operator">-&gt;</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><ul><li><code>Payload</code> standardizes how filter values are processed.</li><li>It provides helper methods (<code>asLike</code>, <code>asBoolean</code>, <code>isJson</code>, etc.).</li><li>This reduces repetitive code inside filter classes.</li></ul>`,92)]))}const c=a(p,[["render",l],["__file","payload.html.vue"]]),r=JSON.parse('{"path":"/api/payload.html","title":"Payload","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"Properties","slug":"properties","link":"#properties","children":[]},{"level":2,"title":"Public Methods","slug":"public-methods","link":"#public-methods","children":[{"level":3,"title":"__toString(): string","slug":"tostring-string","link":"#tostring-string","children":[]},{"level":3,"title":"setValue(mixed $value): Payload","slug":"setvalue-mixed-value-payload","link":"#setvalue-mixed-value-payload","children":[]},{"level":3,"title":"length(): int","slug":"length-int","link":"#length-int","children":[]},{"level":3,"title":"isEmpty(): bool","slug":"isempty-bool","link":"#isempty-bool","children":[]},{"level":3,"title":"isNotEmpty(): bool","slug":"isnotempty-bool","link":"#isnotempty-bool","children":[]},{"level":3,"title":"isNull(): bool","slug":"isnull-bool","link":"#isnull-bool","children":[]},{"level":3,"title":"isJson(): bool","slug":"isjson-bool","link":"#isjson-bool","children":[]},{"level":3,"title":"asBoolean(): bool|null","slug":"asboolean-bool-null","link":"#asboolean-bool-null","children":[]},{"level":3,"title":"asLike(string $side = \\"both\\"): string","slug":"aslike-string-side-both-string","link":"#aslike-string-side-both-string","children":[]},{"level":3,"title":"asInt(): int","slug":"asint-int","link":"#asint-int","children":[]},{"level":3,"title":"raw(): mixed","slug":"raw-mixed","link":"#raw-mixed","children":[]},{"level":3,"title":"isNumeric(): bool","slug":"isnumeric-bool","link":"#isnumeric-bool","children":[]},{"level":3,"title":"isString(): bool","slug":"isstring-bool","link":"#isstring-bool","children":[]},{"level":3,"title":"isArray(): bool","slug":"isarray-bool","link":"#isarray-bool","children":[]},{"level":3,"title":"isTrue(): bool","slug":"istrue-bool","link":"#istrue-bool","children":[]},{"level":3,"title":"isFalse(): bool","slug":"isfalse-bool","link":"#isfalse-bool","children":[]},{"level":3,"title":"asArray(): array","slug":"asarray-array","link":"#asarray-array","children":[]},{"level":3,"title":"toArray(): array","slug":"toarray-array","link":"#toarray-array","children":[]},{"level":3,"title":"toJson(): string","slug":"tojson-string","link":"#tojson-string","children":[]}]},{"level":2,"title":"Example Usage","slug":"example-usage","link":"#example-usage","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{"updatedTime":1756833080000,"contributors":[{"name":"Abdalrhman Emad Saad","email":"a.emad@codeclouders.com","commits":2}]},"filePathRelative":"api/payload.md"}');export{c as comp,r as data};
