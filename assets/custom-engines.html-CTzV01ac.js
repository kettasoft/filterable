import{_ as p,c as l,b as s,e,f as t,a as o,r as c,o as u,d as i}from"./app-BzrB1Tdi.js";const r={},d={class:"table-of-contents"};function k(m,n){const a=c("router-link");return u(),l("div",null,[n[10]||(n[10]=s("h1",{id:"custom-engines",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#custom-engines"},[s("span",null,"Custom Engines")])],-1)),n[11]||(n[11]=s("p",null,"Filterable provides a powerful way to extend its functionality by creating and registering custom filtering engines. This feature enables you to implement your own filtering logic while maintaining compatibility with the package's architecture.",-1)),s("nav",d,[s("ul",null,[s("li",null,[e(a,{to:"#introduction"},{default:t(()=>n[0]||(n[0]=[i("Introduction")])),_:1})]),s("li",null,[e(a,{to:"#creating-a-custom-engine"},{default:t(()=>n[1]||(n[1]=[i("Creating a Custom Engine")])),_:1})]),s("li",null,[e(a,{to:"#registering-a-custom-engine"},{default:t(()=>n[2]||(n[2]=[i("Registering a Custom Engine")])),_:1})]),s("li",null,[e(a,{to:"#using-a-custom-engine"},{default:t(()=>n[3]||(n[3]=[i("Using a Custom Engine")])),_:1})]),s("li",null,[e(a,{to:"#built-in-engines"},{default:t(()=>n[4]||(n[4]=[i("Built-in Engines")])),_:1})]),s("li",null,[e(a,{to:"#error-handling"},{default:t(()=>n[5]||(n[5]=[i("Error Handling")])),_:1})]),s("li",null,[e(a,{to:"#best-practices"},{default:t(()=>n[6]||(n[6]=[i("Best Practices")])),_:1})]),s("li",null,[e(a,{to:"#example-implementation"},{default:t(()=>n[7]||(n[7]=[i("Example Implementation")])),_:1})]),s("li",null,[e(a,{to:"#performance-considerations"},{default:t(()=>n[8]||(n[8]=[i("Performance Considerations")])),_:1})]),s("li",null,[e(a,{to:"#limitations"},{default:t(()=>n[9]||(n[9]=[i("Limitations")])),_:1})])])]),n[12]||(n[12]=o(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>Custom engines allow you to create specialized filtering logic that fits your specific needs while leveraging the Filterable package&#39;s infrastructure. Each custom engine can implement its own filtering strategy while maintaining consistent integration with the rest of the package.</p><h2 id="creating-a-custom-engine" tabindex="-1"><a class="header-anchor" href="#creating-a-custom-engine"><span>Creating a Custom Engine</span></a></h2><p>To create a custom engine, you need to extend the base <code>Engine</code> class and implement its required methods:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Engines<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Engine</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">CustomEngine</span> <span class="token keyword">extends</span> <span class="token class-name">Engine</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">execute</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Builder</span> <span class="token variable">$builder</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Builder</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Implement your custom filtering logic here</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$builder</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">isStrictFromConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Define if the engine should use strict mode by default</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getAllowedFieldsFromConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Define which fields are allowed for filtering</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">isIgnoredEmptyValuesFromConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Define if empty values should be ignored</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getEngineName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Return a unique name for your engine</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;custom&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">defaultOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Define the default operator for filtering</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;=&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getOperatorsFromConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Define supported operators</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&lt;&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;LIKE&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="registering-a-custom-engine" tabindex="-1"><a class="header-anchor" href="#registering-a-custom-engine"><span>Registering a Custom Engine</span></a></h2><p>Once you have created your custom engine, you can register it using the <code>EngineManager::extend()</code> method:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Engines<span class="token punctuation">\\</span>Factory<span class="token punctuation">\\</span>EngineManager</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name static-context">EngineManager</span><span class="token operator">::</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;custom&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">CustomEngine</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This registers your engine under the name &#39;custom&#39;, which you can then use throughout your application.</p><h2 id="using-a-custom-engine" tabindex="-1"><a class="header-anchor" href="#using-a-custom-engine"><span>Using a Custom Engine</span></a></h2><p>After registration, you can use your custom engine in several ways:</p><ol><li>Direct usage with the Filterable facade:</li></ol><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Filterable</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">useEngine</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;custom&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>In a filter class:</li></ol><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Filter</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">UserFilter</span> <span class="token keyword">extends</span> <span class="token class-name">Filter</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$engine</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;custom&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="built-in-engines" tabindex="-1"><a class="header-anchor" href="#built-in-engines"><span>Built-in Engines</span></a></h2><p>The package comes with several built-in engines:</p><ul><li><code>tree</code>: Tree-based filtering structure</li><li><code>ruleset</code>: Rule-based filtering</li><li><code>expression</code>: Expression-based filtering</li><li><code>invokable</code>: Callback-based filtering</li></ul><h2 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling"><span>Error Handling</span></a></h2><p>The engine manager includes built-in validation to ensure that custom engines implement the required interface:</p><ul><li>Attempting to register a class that doesn&#39;t extend <code>Engine</code> will throw an <code>InvalidArgumentException</code></li><li>Using an unregistered engine name will throw an <code>InvalidArgumentException</code></li></ul><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><ol><li><strong>Naming Convention</strong>: Use descriptive names for your custom engines that reflect their purpose</li><li><strong>Implementation</strong>: Ensure your engine implements all required methods properly</li><li><strong>Testing</strong>: Write comprehensive tests for your custom engine</li><li><strong>Documentation</strong>: Document any specific behavior or requirements of your custom engine</li></ol><h2 id="example-implementation" tabindex="-1"><a class="header-anchor" href="#example-implementation"><span>Example Implementation</span></a></h2><p>Here&#39;s a complete example of implementing and using a custom engine:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Engines<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Engine</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">RangeEngine</span> <span class="token keyword">extends</span> <span class="token class-name">Engine</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">execute</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Builder</span> <span class="token variable">$builder</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Builder</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$field</span> <span class="token operator">=&gt;</span> <span class="token variable">$range</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$range</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;min&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token variable">$builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$field</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&gt;=&#39;</span><span class="token punctuation">,</span> <span class="token variable">$range</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;min&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$range</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;max&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token variable">$builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$field</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&lt;=&#39;</span><span class="token punctuation">,</span> <span class="token variable">$range</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;max&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$builder</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getEngineName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;range&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ... implement other required methods</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Register the engine</span></span>
<span class="line"><span class="token class-name static-context">EngineManager</span><span class="token operator">::</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;range&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">RangeEngine</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Use in a filter</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">PriceFilter</span> <span class="token keyword">extends</span> <span class="token class-name">Filter</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$engine</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;range&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="performance-considerations" tabindex="-1"><a class="header-anchor" href="#performance-considerations"><span>Performance Considerations</span></a></h2><p>When implementing a custom engine, consider the following performance aspects:</p><ol><li>Query Optimization: Ensure your engine generates efficient SQL queries</li><li>Memory Usage: Be mindful of memory consumption in your filtering logic</li><li>Caching: Implement caching strategies where appropriate</li></ol><h2 id="limitations" tabindex="-1"><a class="header-anchor" href="#limitations"><span>Limitations</span></a></h2><ul><li>Custom engines must extend the base <code>Engine</code> class</li><li>Engine names must be unique across your application</li><li>Some advanced features might require additional implementation in custom engines</li></ul>`,31))])}const v=p(r,[["render",k],["__file","custom-engines.html.vue"]]),b=JSON.parse('{"path":"/features/custom-engines.html","title":"Custom Engines","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Creating a Custom Engine","slug":"creating-a-custom-engine","link":"#creating-a-custom-engine","children":[]},{"level":2,"title":"Registering a Custom Engine","slug":"registering-a-custom-engine","link":"#registering-a-custom-engine","children":[]},{"level":2,"title":"Using a Custom Engine","slug":"using-a-custom-engine","link":"#using-a-custom-engine","children":[]},{"level":2,"title":"Built-in Engines","slug":"built-in-engines","link":"#built-in-engines","children":[]},{"level":2,"title":"Error Handling","slug":"error-handling","link":"#error-handling","children":[]},{"level":2,"title":"Best Practices","slug":"best-practices","link":"#best-practices","children":[]},{"level":2,"title":"Example Implementation","slug":"example-implementation","link":"#example-implementation","children":[]},{"level":2,"title":"Performance Considerations","slug":"performance-considerations","link":"#performance-considerations","children":[]},{"level":2,"title":"Limitations","slug":"limitations","link":"#limitations","children":[]}],"git":{"updatedTime":1761374304000,"contributors":[{"name":"kettasoft","email":"kettasoft@gmail.com","commits":2}]},"filePathRelative":"features/custom-engines.md"}');export{v as comp,b as data};
