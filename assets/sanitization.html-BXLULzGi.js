import{_ as n,c as a,a as e,o as i}from"./app-o4hQ8xdO.js";const l={};function t(p,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="request-sanitization" tabindex="-1"><a class="header-anchor" href="#request-sanitization"><span>Request Sanitization</span></a></h1><p>Sanitization allows you to clean or transform incomming reuqest data <strong>before</strong> validation or filtering is applied. This feature ensures your filters always work with clean and normalized data.</p><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>To enable sanitization in your filter class, define a <code>protected $sanitizers</code> property. Each entry in this array maps a <strong>request key</strong> to one or more sanitizer classes.</p><h2 id="basic-example" tabindex="-1"><a class="header-anchor" href="#basic-example"><span>Basic Example</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">PostFilter</span> <span class="token keyword">extends</span> <span class="token class-name">Filterable</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token variable">$sanitizers</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">TitleSanitizer</span><span class="token operator">::</span><span class="token keyword">class</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, <code>TitleSanitizer</code> will be applied to the title field of the request before validation or filtering.</p><h2 id="creating-a-sanitizer-class" tabindex="-1"><a class="header-anchor" href="#creating-a-sanitizer-class"><span>Creating a Sanitizer Class</span></a></h2><p>A sanitizer class must implement a <code>Sanitizable</code> interface</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">TitleSanitizer</span> implement Sanitizable</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">sanitize</span><span class="token punctuation">(</span><span class="token keyword type-hint">mixed</span> <span class="token variable">$value</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token variable">$value</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="multiple-sanitizers-per-field" tabindex="-1"><a class="header-anchor" href="#multiple-sanitizers-per-field"><span>Multiple Sanitizers Per field</span></a></h2><p>You can apply multiple sanitizers to the same field by using array:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token variable">$sanitizers</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token class-name static-context">TrimSanitizer</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name static-context">CapitalizeSanitizer</span><span class="token operator">::</span><span class="token keyword">class</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sanitizers are applied <strong>in the order defined</strong>.</p><h2 id="global-sanitizers" tabindex="-1"><a class="header-anchor" href="#global-sanitizers"><span>Global Sanitizers</span></a></h2><p>You may apply a sanitizer globally to all request inputs by specifying the class <strong>without a key</strong>:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token variable">$sanitizers</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token class-name static-context">TrimSanitizer</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token comment">// will apply to all keys</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Note</p><p>Global sanitizers will run <strong>before</strong> field-specific sanitizers.</p></div><h2 id="execution-lifecycle" tabindex="-1"><a class="header-anchor" href="#execution-lifecycle"><span>Execution Lifecycle</span></a></h2><ol><li><strong>Global sanitizers</strong> (apply to all keys)</li><li>Field-specific sanitizers (per key, in array order)</li><li>Validation</li><li>Authorization</li><li>Filtering</li></ol><h2 id="example-scenario" tabindex="-1"><a class="header-anchor" href="#example-scenario"><span>Example Scenario</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">ProductFilter</span> <span class="token keyword">extends</span> <span class="token class-name">Filterable</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token variable">$sanitizers</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token class-name static-context">TrimSanitizer</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token class-name static-context">StripTagsSanitizer</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name static-context">CapitalizeSanitizer</span><span class="token operator">::</span><span class="token keyword">class</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token variable">$rules</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;required&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;string&#39;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">name</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22)]))}const o=n(l,[["render",t],["__file","sanitization.html.vue"]]),r=JSON.parse('{"path":"/sanitization.html","title":"Request Sanitization","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"Basic Example","slug":"basic-example","link":"#basic-example","children":[]},{"level":2,"title":"Creating a Sanitizer Class","slug":"creating-a-sanitizer-class","link":"#creating-a-sanitizer-class","children":[]},{"level":2,"title":"Multiple Sanitizers Per field","slug":"multiple-sanitizers-per-field","link":"#multiple-sanitizers-per-field","children":[]},{"level":2,"title":"Global Sanitizers","slug":"global-sanitizers","link":"#global-sanitizers","children":[]},{"level":2,"title":"Execution Lifecycle","slug":"execution-lifecycle","link":"#execution-lifecycle","children":[]},{"level":2,"title":"Example Scenario","slug":"example-scenario","link":"#example-scenario","children":[]}],"git":{"updatedTime":1748621419000,"contributors":[{"name":"Abdalrhman Emad Saad","email":"a.emad@codeclouders.com","commits":2}]},"filePathRelative":"sanitization.md"}');export{o as comp,r as data};
