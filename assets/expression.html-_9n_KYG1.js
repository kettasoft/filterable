import{_ as s,c as a,a as n,o as t}from"./app-B5YEM-0o.js";const i={};function l(o,e){return t(),a("div",null,e[0]||(e[0]=[n(`<h1 id="⚙️-expression-engine" tabindex="-1"><a class="header-anchor" href="#⚙️-expression-engine"><span>⚙️ Expression Engine</span></a></h1><p>The <strong>Expression Engine</strong> is a flexible and expressive filtering engine designed to handle both flat and deeply nested filters, including relationships and their attributes.</p><p>It is ideal when you want the power of RuleSet-style syntax but also need to filter through relationships and nested relations easily.</p><hr><h2 id="📦-example-request" tabindex="-1"><a class="header-anchor" href="#📦-example-request"><span>📦 Example Request</span></a></h2><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line">GET /posts?filter[status]=pending&amp;filter[author.profile.name][like]=kettasoft</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This will:</p><ul><li>Filter posts where <code>status</code> is <code>pending</code></li><li>AND where the related author&#39;s profile <code>name</code> contains <code>kettasoft</code></li></ul><hr><h2 id="🛠️-how-it-works" tabindex="-1"><a class="header-anchor" href="#🛠️-how-it-works"><span>🛠️ How It Works</span></a></h2><ul><li><p>Filters are parsed from the request&#39;s <code>filter</code> key.</p></li><li><p>Each filter can be a:</p><ul><li>Simple key-value pair (e.g., <code>filter[status]=active</code>)</li><li>Operator-based pair (e.g., <code>filter[name][like]=kettasoft</code>)</li><li>Nested relation filter (e.g., <code>filter[author.profile.name]=ahmed</code>)</li></ul></li><li><p>The engine determines the filter structure and applies the corresponding query constraints.</p></li></ul><hr><h2 id="🔧-default-operator" tabindex="-1"><a class="header-anchor" href="#🔧-default-operator"><span>🔧 Default Operator</span></a></h2><p>If a filter doesn&#39;t specify an operator, the <strong>default operator</strong> will be used.<br> This default is configurable in the engine settings.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token string single-quoted-string">&#39;default_operator&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;=&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="✅-supported-features" tabindex="-1"><a class="header-anchor" href="#✅-supported-features"><span>✅ Supported Features</span></a></h2><ul><li>✅ Flat and nested filters</li><li>✅ Dot notation for relationships (e.g., <code>author.profile.name</code>)</li><li>✅ Customizable default operator</li><li>✅ Whitelisting of allowed fields &amp; relations</li><li>✅ Works well with eager loading and relationship validation</li><li>✅ Prevents filtering on undefined fields (optional strict mode)</li></ul><hr><h2 id="✅-allowed-fields-relations" tabindex="-1"><a class="header-anchor" href="#✅-allowed-fields-relations"><span>✅ Allowed Fields &amp; Relations</span></a></h2><p>To avoid unauthorized or unintended access, you can configure the engine to only accept specific fields or relations:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">useEngine</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;expression&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token operator">-&gt;</span><span class="token function">allowdFields</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;status&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token operator">-&gt;</span><span class="token function">allowRelations</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;author.profile&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token comment">// specific fields in this relation</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">paginate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In <strong>strict mode</strong>, unsupported fields will be rejected with a validation error.</p><hr><h2 id="📌-use-case" tabindex="-1"><a class="header-anchor" href="#📌-use-case"><span>📌 Use Case</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$filters</span><span class="token punctuation">,</span> <span class="token class-name static-context">ExpressionEngine</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="🧠-internal-logic-simplified" tabindex="-1"><a class="header-anchor" href="#🧠-internal-logic-simplified"><span>🧠 Internal Logic (Simplified)</span></a></h2><ul><li>Parse the <code>filter</code> array recursively.</li><li>Detect relationships via dot notation.</li><li>Resolve the relation path and apply <code>whereHas</code> queries for related models.</li><li>Build appropriate SQL queries via the Eloquent builder.</li><li>Use the defined or default operator.</li></ul>`,29)]))}const r=s(i,[["render",l],["__file","expression.html.vue"]]),c=JSON.parse('{"path":"/engines/expression.html","title":"⚙️ Expression Engine","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"📦 Example Request","slug":"📦-example-request","link":"#📦-example-request","children":[]},{"level":2,"title":"🛠️ How It Works","slug":"🛠️-how-it-works","link":"#🛠️-how-it-works","children":[]},{"level":2,"title":"🔧 Default Operator","slug":"🔧-default-operator","link":"#🔧-default-operator","children":[]},{"level":2,"title":"✅ Supported Features","slug":"✅-supported-features","link":"#✅-supported-features","children":[]},{"level":2,"title":"✅ Allowed Fields & Relations","slug":"✅-allowed-fields-relations","link":"#✅-allowed-fields-relations","children":[]},{"level":2,"title":"📌 Use Case","slug":"📌-use-case","link":"#📌-use-case","children":[]},{"level":2,"title":"🧠 Internal Logic (Simplified)","slug":"🧠-internal-logic-simplified","link":"#🧠-internal-logic-simplified","children":[]}],"git":{"updatedTime":1748577829000,"contributors":[{"name":"Abdalrhman Emad Saad","email":"a.emad@codeclouders.com","commits":1}]},"filePathRelative":"engines/expression.md"}');export{r as comp,c as data};
