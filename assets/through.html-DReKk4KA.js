import{_ as n,c as a,a as e,o as t}from"./app-o4hQ8xdO.js";const p={};function l(o,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="apply-custom-query-callbacks-using-through" tabindex="-1"><a class="header-anchor" href="#apply-custom-query-callbacks-using-through"><span>Apply Custom Query Callbacks using through()</span></a></h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>The <code>through()</code> method allows you to apply an array of custom query callbacks to the Eloquent builder instance within the <code>Filterable</code> class.</p><p>This gives you a powerful way to manipulate queries using closures (similar to pipelines), before or after applying filters — enabling advanced use cases such as chaining global conditions, joins, or even reordering logic externally.</p><h3 id="🧪-usage" tabindex="-1"><a class="header-anchor" href="#🧪-usage"><span>🧪 Usage</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Filterable</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Post</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">setBuilder</span><span class="token punctuation">(</span><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$results</span> <span class="token operator">=</span> <span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">through</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$builder</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;status&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;published&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$builder</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$builder</span><span class="token operator">-&gt;</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$posts</span> <span class="token operator">=</span> <span class="token variable">$results</span><span class="token operator">-&gt;</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also chain with other Filterable methods:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$results</span> <span class="token operator">=</span> <span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">setBuilder</span><span class="token punctuation">(</span><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">through</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">        <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$builder</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;is_active&#39;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="⚠️-notes" tabindex="-1"><a class="header-anchor" href="#⚠️-notes"><span>⚠️ Notes</span></a></h3><ul><li>Every item in the array passed to through() must be a valid callable.</li><li>If a non-callable value is passed, an InvalidArgumentException will be thrown.</li><li>Callbacks receive the query builder as the only argument and must return the modified builder.</li><li>This method is chainable and returns the Filterable instance.</li></ul><h3 id="💡-benefits" tabindex="-1"><a class="header-anchor" href="#💡-benefits"><span>💡 Benefits</span></a></h3><ul><li>🔄 Adds a flexible, composable way to extend queries externally.</li><li>🧪 Great for injecting reusable query logic without modifying filters.</li><li>🚫 Prevents tight coupling between filter logic and query logic.</li><li>✅ Compatible with both eager and late filter application (apply()).</li><li>🧱 Clean separation of filtering rules and additional query logic.</li></ul>`,12)]))}const c=n(p,[["render",l],["__file","through.html.vue"]]),u=JSON.parse('{"path":"/features/through.html","title":"Apply Custom Query Callbacks using through()","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[{"level":3,"title":"🧪 Usage","slug":"🧪-usage","link":"#🧪-usage","children":[]},{"level":3,"title":"⚠️ Notes","slug":"⚠️-notes","link":"#⚠️-notes","children":[]},{"level":3,"title":"💡 Benefits","slug":"💡-benefits","link":"#💡-benefits","children":[]}]}],"git":{"updatedTime":1753868735000,"contributors":[{"name":"Abdalrhman Emad Saad","email":"a.emad@codeclouders.com","commits":1}]},"filePathRelative":"features/through.md"}');export{c as comp,u as data};
