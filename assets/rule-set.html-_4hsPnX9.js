import{_ as s,c as t,a,o as n}from"./app-CeawQxZD.js";const i={};function l(r,e){return n(),t("div",null,e[0]||(e[0]=[a(`<h2 id="⚙️-ruleset-engine" tabindex="-1"><a class="header-anchor" href="#⚙️-ruleset-engine"><span>⚙️ Ruleset Engine</span></a></h2><p>The <strong>Ruleset Engine</strong> is a straightforward filtering strategy that interprets filters as flat rule arrays. It&#39;s especially suitable for simple request formats, where each filter targets a specific field using one or more operators.</p><p>This engine is ideal for APIs and frontends that send clean key-value pairs or use operator-based nesting.</p><hr><h3 id="✅-when-to-use" tabindex="-1"><a class="header-anchor" href="#✅-when-to-use"><span>✅ When to Use</span></a></h3><ul><li>When handling <strong>simple query structures</strong> like:<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">GET /posts?filter[status]=pending&amp;filter[name][like]=kettasoft</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>When you prefer clear mapping of field-operator-value.</li><li>When you want to use <strong>default operators</strong> for common fields without specifying one explicitly.</li></ul><hr><h3 id="🧩-how-it-works" tabindex="-1"><a class="header-anchor" href="#🧩-how-it-works"><span>🧩 How It Works</span></a></h3><p>The engine accepts a request array structured as:</p><h4 id="🔹-format-1-default-operator-e-g-eq" tabindex="-1"><a class="header-anchor" href="#🔹-format-1-default-operator-e-g-eq"><span>🔹 Format 1: Default operator (e.g. <code>eq</code>)</span></a></h4><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line">/posts?filter[status]=pending</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This will be interpreted as:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;status&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;eq&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;pending&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The default operator (<code>eq</code>) is configurable through the engine&#39;s options or <code>Filterable</code> settings.</p><h4 id="🔹-format-2-custom-operator" tabindex="-1"><a class="header-anchor" href="#🔹-format-2-custom-operator"><span>🔹 Format 2: Custom operator</span></a></h4><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line">/posts?filter[name][like]=kettasoft</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This will be interpreted as:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;like&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;kettasoft&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="🛠-operator-resolution" tabindex="-1"><a class="header-anchor" href="#🛠-operator-resolution"><span>🛠 Operator Resolution</span></a></h3><p>If an operator is not explicitly provided in the request, the <strong>default operator</strong> will be used.<br> This default can be set via the engine configuration.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token string single-quoted-string">&#39;default_operator&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;=&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="🧱-supported-operators" tabindex="-1"><a class="header-anchor" href="#🧱-supported-operators"><span>🧱 Supported Operators</span></a></h3><table><thead><tr><th>Operator</th><th>SQL Equivalent</th><th>Example</th></tr></thead><tbody><tr><td>eq</td><td>=</td><td><code>filter[status]=published</code></td></tr><tr><td>neq</td><td>!=</td><td><code>filter[status][neq]=draft</code></td></tr><tr><td>gt</td><td>&gt;</td><td><code>filter[views][gt]=100</code></td></tr><tr><td>gte</td><td>&gt;=</td><td><code>filter[created_at][gte]=2024-01-01</code></td></tr><tr><td>lt</td><td>&lt;</td><td><code>filter[views][lt]=100</code></td></tr><tr><td>lte</td><td>&lt;=</td><td><code>filter[views][lte]=50</code></td></tr><tr><td>like</td><td>LIKE</td><td><code>filter[title][like]=%laravel%</code></td></tr><tr><td>in</td><td>IN</td><td><code>filter[id][in][]=1&amp;filter[id][in][]=2</code></td></tr><tr><td>between</td><td>BETWEEN</td><td><code>filter[price][between][]=100&amp;filter[price][between][]=200</code></td></tr></tbody></table><blockquote><p>Operators are customizable and extendable. You may add your own by overriding the engine&#39;s resolver.</p></blockquote><hr><h3 id="🧪-example-filter-class" tabindex="-1"><a class="header-anchor" href="#🧪-example-filter-class"><span>🧪 Example Filter Class</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Filterable</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">PostFilter</span> <span class="token keyword">extends</span> <span class="token class-name">Filterable</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$allowdFields</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;status&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;published_at&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$allowdOperators</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;eq&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;like&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;gte&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Allowed operators</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="🔐-security-strict-mode" tabindex="-1"><a class="header-anchor" href="#🔐-security-strict-mode"><span>🔐 Security &amp; Strict Mode</span></a></h3><p>You can enforce strict filtering by enabling <strong>strict mode</strong>, which validates:</p><ul><li>That each filter field is allowed.</li><li>That each operator is supported.</li><li>That no unexpected or malicious keys are applied.</li></ul><p>If any validation fails, an exception will be thrown instead of silently ignoring the input.</p><hr><h3 id="🌿-best-practices" tabindex="-1"><a class="header-anchor" href="#🌿-best-practices"><span>🌿 Best Practices</span></a></h3><ul><li>Always define <code>allowed fields</code> and <code>allowed operators</code> in your filter class.</li><li>Use request validation or sanitizers to clean filter input before applying to query.</li><li>Avoid exposing sensitive fields via filters unless explicitly allowed.</li></ul>`,37)]))}const p=s(i,[["render",l],["__file","rule-set.html.vue"]]),d=JSON.parse('{"path":"/engines/rule-set.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"⚙️ Ruleset Engine","slug":"⚙️-ruleset-engine","link":"#⚙️-ruleset-engine","children":[{"level":3,"title":"✅ When to Use","slug":"✅-when-to-use","link":"#✅-when-to-use","children":[]},{"level":3,"title":"🧩 How It Works","slug":"🧩-how-it-works","link":"#🧩-how-it-works","children":[]},{"level":3,"title":"🛠 Operator Resolution","slug":"🛠-operator-resolution","link":"#🛠-operator-resolution","children":[]},{"level":3,"title":"🧱 Supported Operators","slug":"🧱-supported-operators","link":"#🧱-supported-operators","children":[]},{"level":3,"title":"🧪 Example Filter Class","slug":"🧪-example-filter-class","link":"#🧪-example-filter-class","children":[]},{"level":3,"title":"🔐 Security & Strict Mode","slug":"🔐-security-strict-mode","link":"#🔐-security-strict-mode","children":[]},{"level":3,"title":"🌿 Best Practices","slug":"🌿-best-practices","link":"#🌿-best-practices","children":[]}]}],"git":{"updatedTime":1748577829000,"contributors":[{"name":"Abdalrhman Emad Saad","email":"a.emad@codeclouders.com","commits":2}]},"filePathRelative":"engines/rule-set.md"}');export{p as comp,d as data};
