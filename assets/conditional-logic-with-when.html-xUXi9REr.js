import{_ as s,c as a,a as e,o as t}from"./app-CLktT46g.js";const i={};function p(o,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="conditional-logic-with-when" tabindex="-1"><a class="header-anchor" href="#conditional-logic-with-when"><span>Conditional Logic with <strong><code>when</code></strong></span></a></h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>The <code>when()</code> method allows you to conditionally modify the instance based on a boolean expression. Instead of writing verbose conditionals, <code>when()</code> helps you write expressive, chainable, and concise logic to update your filter configuration. Unlike immutability patterns, this method modifies the current instance directly and returns $this, making it perfect for method chaining.</p><h3 id="✨-usage" tabindex="-1"><a class="header-anchor" href="#✨-usage"><span>✨ Usage</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token variable">$isAdmin</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Filterable</span> <span class="token variable">$filter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">setAllowedFields</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;role&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the setAllowedFields() call is only executed if $isAdmin is true.</p><h3 id="🔁-nesting" tabindex="-1"><a class="header-anchor" href="#🔁-nesting"><span>🔁 Nesting</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">setAllowedFields</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">setAllowedFields</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;phone&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">fn</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">setAllowedFields</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;address&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🔬-behavior" tabindex="-1"><a class="header-anchor" href="#🔬-behavior"><span>🔬 Behavior</span></a></h3><p>If $condition is true → callback is invoked with the current instance.</p><p>If $condition is false → nothing happens.</p><p>In both cases, the original instance is returned.</p><h3 id="💡-benefits" tabindex="-1"><a class="header-anchor" href="#💡-benefits"><span>💡 Benefits</span></a></h3><ul><li>✨ Cleaner Code: Eliminates the need for verbose if conditions. Just chain your logic fluently using when().</li><li>🧠 Improved Readability: The code reads naturally, e.g., “When the condition is true, apply this logic.”</li><li>🧪 Easier Testing: Testing conditional filter logic becomes straightforward and expressive.</li><li>🔁 Supports Nesting: Allows deeply nested conditional logic while keeping the syntax clean and expressive.</li><li>🔗 Chainable Design: when() returns the same instance, enabling seamless method chaining without breaking flow.</li></ul>`,14)]))}const c=s(i,[["render",p],["__file","conditional-logic-with-when.html.vue"]]),r=JSON.parse('{"path":"/features/conditional-logic-with-when.html","title":"Conditional Logic with when","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[{"level":3,"title":"✨ Usage","slug":"✨-usage","link":"#✨-usage","children":[]},{"level":3,"title":"🔁 Nesting","slug":"🔁-nesting","link":"#🔁-nesting","children":[]},{"level":3,"title":"🔬 Behavior","slug":"🔬-behavior","link":"#🔬-behavior","children":[]},{"level":3,"title":"💡 Benefits","slug":"💡-benefits","link":"#💡-benefits","children":[]}]}],"git":{"updatedTime":1753799519000,"contributors":[{"name":"Abdalrhman Emad Saad","email":"a.emad@codeclouders.com","commits":1}]},"filePathRelative":"features/conditional-logic-with-when.md"}');export{c as comp,r as data};
