import{_ as n,c as a,a as e,o as t}from"./app-DyOzjmXU.js";const p={};function o(l,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="closure-based-filter-engine" tabindex="-1"><a class="header-anchor" href="#closure-based-filter-engine"><span><strong>Closure-Based Filter Engine</strong></span></a></h1><p>The <strong>Closure Pipeline Filter Engine</strong> allows you to apply dynamic query filters to Eloquent models using closures. This approach provides a flexible, clean, and testable way to filter data based on request input or custom conditions.</p><div class="hint-container caution"><p class="hint-container-title">Important Node</p><p>The <strong>Closure Pipeline Engine</strong> dose <strong>not</strong> og through any <a href="sanitization">sanitization</a> or <a href="validation">validation</a> processes. Ensuer that you manually handle input validation and security checks when using closures in filter logic to avoid unexpected behavior or security vulnerabilities.</p></div><h3 id="basic-usage" tabindex="-1"><a class="header-anchor" href="#basic-usage"><span>Basic Usage</span></a></h3><p>You can call the <code>filter()</code> method on an Eloquent model and pass an array of closures keyed by filter names:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;id&#39;</span> <span class="token operator">=&gt;</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;status&#39;</span> <span class="token operator">=&gt;</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;status&#39;</span><span class="token punctuation">,</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;status&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each closure receives the query builder instance and applies a filter condition. This pattern is particularly powerful when combined with conditional logic.</p><hr><h3 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works"><span>How It Works</span></a></h3><ol><li>The engine accepts an array of closures.</li><li>It loops through the defined keys.</li><li>If the request contains a matching key, the corresponding closure is executed.</li><li>Closures can access any external scope, including request() or service dependencies.</li></ol><h3 id="conditional-filters" tabindex="-1"><a class="header-anchor" href="#conditional-filters"><span>Conditional Filters</span></a></h3><p>You can make filters conditional by checking the input inside the closure:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">filled</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">?</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;like&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;%&#39;</span> <span class="token operator">.</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;%&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">:</span> <span class="token variable">$query</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="composable-filters" tabindex="-1"><a class="header-anchor" href="#composable-filters"><span>Composable Filters</span></a></h3><p>You can extract filters to named closures or dedicated classes for reuse:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$filters</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;email&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">EmailFilter</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;active&#39;</span> <span class="token operator">=&gt;</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;active&#39;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$filters</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Where <code>EmailFilter::make()</code> returns a closure:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">EmailFilter</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="full-example" tabindex="-1"><a class="header-anchor" href="#full-example"><span>Full Example</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$filters</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;id&#39;</span> <span class="token operator">=&gt;</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;email&#39;</span> <span class="token operator">=&gt;</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;like&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;%&#39;</span> <span class="token operator">.</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;%&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;created_from&#39;</span> <span class="token operator">=&gt;</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">whereDate</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&gt;=&#39;</span><span class="token punctuation">,</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_from&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;created_to&#39;</span> <span class="token operator">=&gt;</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">whereDate</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&lt;=&#39;</span><span class="token punctuation">,</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_to&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$filters</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">paginate</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="notes" tabindex="-1"><a class="header-anchor" href="#notes"><span>Notes</span></a></h3><ul><li>Keys in the filter array should correspond to expected request inputs.</li><li>You can combine this engine with query macro or trait to apply it globally.</li><li>Works seamlessly with Laravel pagination, sorting, and scopes.</li></ul><hr>`,26)]))}const c=n(p,[["render",o],["__file","closure.html.vue"]]),r=JSON.parse('{"path":"/engines/closure.html","title":"Closure-Based Filter Engine","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Basic Usage","slug":"basic-usage","link":"#basic-usage","children":[]},{"level":3,"title":"How It Works","slug":"how-it-works","link":"#how-it-works","children":[]},{"level":3,"title":"Conditional Filters","slug":"conditional-filters","link":"#conditional-filters","children":[]},{"level":3,"title":"Composable Filters","slug":"composable-filters","link":"#composable-filters","children":[]},{"level":3,"title":"Full Example","slug":"full-example","link":"#full-example","children":[]},{"level":3,"title":"Notes","slug":"notes","link":"#notes","children":[]}],"git":{"updatedTime":1747728168000,"contributors":[{"name":"Abdalrhman Emad Saad","email":"a.emad@codeclouders.com","commits":1}]},"filePathRelative":"engines/closure.md"}');export{c as comp,r as data};
