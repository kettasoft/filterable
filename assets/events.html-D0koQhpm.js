import{_ as s,c as a,a as e,o as t}from"./app-BHXdpbhA.js";const p={};function l(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="events" tabindex="-1"><a class="header-anchor" href="#events"><span>Events</span></a></h1><p>The Filterable Event System allows you to listen to lifecycle events during filtering operations. This provides powerful hooks for logging, monitoring, analytics, auditing, and implementing custom business logic that reacts to filtering activities.</p><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents"><span>Table of Contents</span></a></h2><ul><li><a href="#introduction">Introduction</a></li><li><a href="#configuration">Configuration</a></li><li><a href="#available-events">Available Events</a></li><li><a href="#registering-event-listeners">Registering Event Listeners</a><ul><li><a href="#global-listeners">Global Listeners</a></li><li><a href="#filter-specific-observers">Filter-Specific Observers</a></li></ul></li><li><a href="#event-payloads">Event Payloads</a></li><li><a href="#enabling-disabling-events">Enabling/Disabling Events</a></li><li><a href="#use-cases">Use Cases</a></li><li><a href="#exception-handling">Exception Handling</a></li><li><a href="#api-reference">API Reference</a></li></ul><hr><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>The event system is lightweight, framework-agnostic (though designed for Laravel), and doesn&#39;t depend on Laravel&#39;s Event facade. It uses a simple pub-sub pattern that integrates seamlessly with the filterable lifecycle.</p><p><strong>Key Features:</strong></p><ul><li>🎯 Global and filter-specific event listeners</li><li>🛡️ Safe exception handling (listener failures won&#39;t crash your app)</li><li>⚙️ Configurable (can be disabled globally or per instance)</li><li>📊 Perfect for logging, monitoring, and analytics</li><li>🧪 Easy to test with listener flushing</li></ul><hr><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h2><p>Enable or disable the event system in <code>config/filterable.php</code>:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token string single-quoted-string">&#39;events&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">    |--------------------------------------------------------------------------</span>
<span class="line">    | Enable or Disable Event System</span>
<span class="line">    |--------------------------------------------------------------------------</span>
<span class="line">    |</span>
<span class="line">    | This option allows you to enable or disable the event system globally.</span>
<span class="line">    | When disabled, no event listeners or observers will be triggered.</span>
<span class="line">    |</span>
<span class="line">    */</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;enabled&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;FILTERABLE_EVENTS_ENABLED&#39;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also set this in your <code>.env</code> file:</p><div class="language-env line-numbers-mode" data-highlighter="prismjs" data-ext="env" data-title="env"><pre><code><span class="line">FILTERABLE_EVENTS_ENABLED=true</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="available-events" tabindex="-1"><a class="header-anchor" href="#available-events"><span>Available Events</span></a></h2><p>The following events are dispatched during the filterable lifecycle:</p><table><thead><tr><th>Event Name</th><th>Description</th><th>When Fired</th><th>Payload</th></tr></thead><tbody><tr><td><code>filterable.initializing</code></td><td>A new Filterable instance is being created</td><td>Constructor start</td><td><code>$filterable</code></td></tr><tr><td><code>filterable.resolved</code></td><td>Engine and request data have been resolved</td><td>Constructor end</td><td><code>$filterable, $engine, $data</code></td></tr><tr><td><code>filterable.applied</code></td><td>Filters have been executed successfully</td><td>After successful <code>apply()</code></td><td><code>$filterable, $builder</code></td></tr><tr><td><code>filterable.failed</code></td><td>An exception occurred during <code>apply()</code></td><td>Catch block in <code>apply()</code></td><td><code>$filterable, $exception, $builder</code></td></tr><tr><td><code>filterable.finished</code></td><td>Filtering lifecycle has completed</td><td>Finally block in <code>apply()</code></td><td><code>$filterable, $builder</code></td></tr></tbody></table><hr><h2 id="registering-event-listeners" tabindex="-1"><a class="header-anchor" href="#registering-event-listeners"><span>Registering Event Listeners</span></a></h2><h3 id="global-listeners" tabindex="-1"><a class="header-anchor" href="#global-listeners"><span>Global Listeners</span></a></h3><p>Global listeners are triggered for <strong>all</strong> filterable instances, regardless of the filter class.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Filterable</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filterable.applied&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Filterable</span> <span class="token variable">$filterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Filter applied&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;filter_class&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$filterable</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;sql&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$filterable</span><span class="token operator">-&gt;</span><span class="token function">getBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">toSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;bindings&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$filterable</span><span class="token operator">-&gt;</span><span class="token function">getBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Registering Multiple Listeners:</strong></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// Log when filters start initializing</span></span>
<span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filterable.initializing&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Filterable</span> <span class="token variable">$filterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Initializing filter: &quot;</span> <span class="token operator">.</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$filterable</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Track successful applications</span></span>
<span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filterable.applied&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Filterable</span> <span class="token variable">$filterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">metrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filters.applied&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Handle failures</span></span>
<span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filterable.failed&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Filterable</span> <span class="token variable">$filterable</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Throwable</span> <span class="token variable">$exception</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Filter failed&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;filter&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$filterable</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;error&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$exception</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filter-specific-observers" tabindex="-1"><a class="header-anchor" href="#filter-specific-observers"><span>Filter-Specific Observers</span></a></h3><p>Observers are called only for specific filter classes. This is ideal for filter-specific logging or side effects.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>PostFilter</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Filterable</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token class-name static-context">PostFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Filterable</span> <span class="token variable">$filterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// $event is the event name without &#39;filterable.&#39; prefix</span></span>
<span class="line">    <span class="token comment">// $filterable is instance of Filterable</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$event</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;applied&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">activity</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">causedBy</span><span class="token punctuation">(</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">performedOn</span><span class="token punctuation">(</span><span class="token variable">$filterable</span><span class="token operator">-&gt;</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;PostFilter was applied&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Multiple Observers:</strong></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token class-name static-context">UserFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Filterable</span> <span class="token variable">$filterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">match</span> <span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;initializing&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;UserFilter initializing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;applied&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;UserFilter applied successfully&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;failed&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;UserFilter failed&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;error&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$filterable</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">default</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="event-payloads" tabindex="-1"><a class="header-anchor" href="#event-payloads"><span>Event Payloads</span></a></h2><p>Each event receives different payload data:</p><h3 id="filterable-initializing" tabindex="-1"><a class="header-anchor" href="#filterable-initializing"><span><code>filterable.initializing</code></span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Filterable</span> <span class="token variable">$filterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// $filterable: The Filterable instance</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filterable-resolved" tabindex="-1"><a class="header-anchor" href="#filterable-resolved"><span><code>filterable.resolved</code></span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$engine</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// $engine: The resolved Engine instance</span></span>
<span class="line">    <span class="token comment">// $data: Parsed request data array</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filterable-applied" tabindex="-1"><a class="header-anchor" href="#filterable-applied"><span><code>filterable.applied</code></span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Filterable</span> <span class="token variable">$filterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// $filterable: The Filterable instance</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filterable-failed" tabindex="-1"><a class="header-anchor" href="#filterable-failed"><span><code>filterable.failed</code></span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$filterable</span><span class="token punctuation">,</span> <span class="token variable">$exception</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// $filterable: The Filterable instance</span></span>
<span class="line">    <span class="token comment">// $exception: The Throwable that was caught</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filterable-finished" tabindex="-1"><a class="header-anchor" href="#filterable-finished"><span><code>filterable.finished</code></span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Filterable</span> <span class="token variable">$filterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// $filterable: The Filterable instance</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="enabling-disabling-events" tabindex="-1"><a class="header-anchor" href="#enabling-disabling-events"><span>Enabling/Disabling Events</span></a></h2><h3 id="global-configuration" tabindex="-1"><a class="header-anchor" href="#global-configuration"><span>Global Configuration</span></a></h3><p>Disable events globally in <code>config/filterable.php</code>:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token string single-quoted-string">&#39;events&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;enabled&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="per-instance-control" tabindex="-1"><a class="header-anchor" href="#per-instance-control"><span>Per-Instance Control</span></a></h3><p>Override the global setting for specific instances:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// Disable events for this instance</span></span>
<span class="line"><span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token class-name static-context">PostFilter</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">disableEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Enable events for this instance (even if globally disabled)</span></span>
<span class="line"><span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token class-name static-context">PostFilter</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">enableEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="conditional-event-control" tabindex="-1"><a class="header-anchor" href="#conditional-event-control"><span>Conditional Event Control</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token class-name static-context">PostFilter</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;production&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">fn</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">disableEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token variable">$builder</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="use-cases" tabindex="-1"><a class="header-anchor" href="#use-cases"><span>Use Cases</span></a></h2><h3 id="_1-audit-logging" tabindex="-1"><a class="header-anchor" href="#_1-audit-logging"><span>1. Audit Logging</span></a></h3><p>Track who applied which filters and when:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filterable.applied&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Filterable</span> <span class="token variable">$filterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name static-context">AuditLog</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;user_id&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;filter_class&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$filterable</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;filters_applied&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$filterable</span><span class="token operator">-&gt;</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;sql_query&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$filterable</span><span class="token operator">-&gt;</span><span class="token function">getBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">toSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;timestamp&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-performance-monitoring" tabindex="-1"><a class="header-anchor" href="#_2-performance-monitoring"><span>2. Performance Monitoring</span></a></h3><p>Track slow filters:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filterable.finished&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Filterable</span> <span class="token variable">$filterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$executionTime</span> <span class="token operator">=</span> <span class="token function">microtime</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token constant">LARAVEL_START</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$executionTime</span> <span class="token operator">&gt;</span> <span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Slow filter detected&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;filter&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$filterable</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;execution_time&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$executionTime</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;sql&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$filterable</span><span class="token operator">-&gt;</span><span class="token function">getBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">toSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-analytics-metrics" tabindex="-1"><a class="header-anchor" href="#_3-analytics-metrics"><span>3. Analytics &amp; Metrics</span></a></h3><p>Collect usage statistics:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filterable.applied&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Filterable</span> <span class="token variable">$filterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name static-context">Redis</span><span class="token operator">::</span><span class="token function">hincrby</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filter_stats&#39;</span><span class="token punctuation">,</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$filterable</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$filterable</span><span class="token operator">-&gt;</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token function">array_keys</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$field</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name static-context">Redis</span><span class="token operator">::</span><span class="token function">hincrby</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filter_fields&#39;</span><span class="token punctuation">,</span> <span class="token variable">$field</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-error-notifications" tabindex="-1"><a class="header-anchor" href="#_4-error-notifications"><span>4. Error Notifications</span></a></h3><p>Send alerts when filters fail:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filterable.failed&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Filterable</span> <span class="token variable">$filterable</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Throwable</span> <span class="token variable">$exception</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name static-context">Notification</span><span class="token operator">::</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;slack&#39;</span><span class="token punctuation">,</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;logging.slack_webhook&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token operator">-&gt;</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FilterFailureNotification</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$filterable</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token variable">$exception</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token variable">$filterable</span><span class="token operator">-&gt;</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-cache-invalidation" tabindex="-1"><a class="header-anchor" href="#_5-cache-invalidation"><span>5. Cache Invalidation</span></a></h3><p>Clear relevant caches when filters are applied:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token class-name static-context">PostFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Filterable</span> <span class="token variable">$filterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$event</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;applied&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name static-context">Cache</span><span class="token operator">::</span><span class="token function">tags</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;posts&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;filters&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-development-debugging" tabindex="-1"><a class="header-anchor" href="#_6-development-debugging"><span>6. Development Debugging</span></a></h3><p>Log all filter activity in development:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;local&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filterable.resolved&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$engine</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Filter Resolved&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;engine&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$engine</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;data&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$data</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="exception-handling" tabindex="-1"><a class="header-anchor" href="#exception-handling"><span>Exception Handling</span></a></h2><p>The event system handles exceptions gracefully. If a listener throws an exception, it will be caught and logged without breaking the filtering process.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filterable.applied&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Filterable</span> <span class="token variable">$filterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// This will be caught and logged, but won&#39;t crash the app</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>Exception</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Listener failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// The filter will still work correctly</span></span>
<span class="line"><span class="token variable">$results</span> <span class="token operator">=</span> <span class="token class-name static-context">PostFilter</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token variable">$builder</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Exception Logging:</strong></p><p>Failed listeners are logged using Laravel&#39;s logger (if available) or <code>error_log()</code>:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">[2025-10-14 10:23:45] production.ERROR: Filterable event listener failed for event &#39;filterable.applied&#39;: Listener failed! {&quot;event&quot;:&quot;filterable.applied&quot;,&quot;type&quot;:&quot;listener&quot;,&quot;exception&quot;:{...},&quot;filterable_class&quot;:&quot;App\\\\Http\\\\Filters\\\\PostFilter&quot;}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="api-reference" tabindex="-1"><a class="header-anchor" href="#api-reference"><span>API Reference</span></a></h2><h3 id="static-methods" tabindex="-1"><a class="header-anchor" href="#static-methods"><span>Static Methods</span></a></h3><h4 id="filterable-on-string-event-callable-callback-void" tabindex="-1"><a class="header-anchor" href="#filterable-on-string-event-callable-callback-void"><span><code>Filterable::on(string $event, callable $callback): void</code></span></a></h4><p>Register a global event listener for all filterable instances.</p><p><strong>Parameters:</strong></p><ul><li><code>$event</code>: The event name (e.g., <code>&#39;filterable.applied&#39;</code>)</li><li><code>$callback</code>: The callback to execute when the event fires</li></ul><p><strong>Example:</strong></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filterable.applied&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Filterable</span> <span class="token variable">$filterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">logger</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Filter applied&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="filterable-observe-string-filterclass-callable-callback-void" tabindex="-1"><a class="header-anchor" href="#filterable-observe-string-filterclass-callable-callback-void"><span><code>Filterable::observe(string $filterClass, callable $callback): void</code></span></a></h4><p>Register an observer for a specific filter class.</p><p><strong>Parameters:</strong></p><ul><li><code>$filterClass</code>: The fully qualified filter class name</li><li><code>$callback</code>: The observer callback receiving <code>($event, $filterable)</code></li></ul><p><strong>Example:</strong></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token class-name static-context">PostFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Filterable</span> <span class="token variable">$filterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$event</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;applied&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Handle the event</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="filterable-flushlisteners-void" tabindex="-1"><a class="header-anchor" href="#filterable-flushlisteners-void"><span><code>Filterable::flushListeners(): void</code></span></a></h4><p>Remove all registered event listeners and observers.</p><p><strong>Example:</strong></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">flushListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="filterable-getlisteners-string-event-array" tabindex="-1"><a class="header-anchor" href="#filterable-getlisteners-string-event-array"><span><code>Filterable::getListeners(string $event): array</code></span></a></h4><p>Get all registered listeners for a specific event.</p><p><strong>Parameters:</strong></p><ul><li><code>$event</code>: The event name</li></ul><p><strong>Returns:</strong> Array of callable listeners</p><p><strong>Example:</strong></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$listeners</span> <span class="token operator">=</span> <span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">getListeners</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filterable.applied&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="filterable-getobservers-string-filterclass-array" tabindex="-1"><a class="header-anchor" href="#filterable-getobservers-string-filterclass-array"><span><code>Filterable::getObservers(string $filterClass): array</code></span></a></h4><p>Get all registered observers for a specific filter class.</p><p><strong>Parameters:</strong></p><ul><li><code>$filterClass</code>: The filter class name</li></ul><p><strong>Returns:</strong> Array of callable observers</p><p><strong>Example:</strong></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$observers</span> <span class="token operator">=</span> <span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">getObservers</span><span class="token punctuation">(</span><span class="token class-name static-context">PostFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="instance-methods" tabindex="-1"><a class="header-anchor" href="#instance-methods"><span>Instance Methods</span></a></h3><h4 id="enableevents-static" tabindex="-1"><a class="header-anchor" href="#enableevents-static"><span><code>enableEvents(): static</code></span></a></h4><p>Enable events for this specific filterable instance.</p><p><strong>Example:</strong></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token class-name static-context">PostFilter</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">enableEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="disableevents-static" tabindex="-1"><a class="header-anchor" href="#disableevents-static"><span><code>disableEvents(): static</code></span></a></h4><p>Disable events for this specific filterable instance.</p><p><strong>Example:</strong></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token class-name static-context">PostFilter</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">disableEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><ol><li><p><strong>Keep listeners lightweight</strong>: Avoid heavy processing in event listeners to prevent performance degradation.</p></li><li><p><strong>Use queued jobs for expensive operations</strong>: If you need to perform heavy tasks, dispatch a job from the listener:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filterable.applied&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$filterable</span><span class="token punctuation">,</span> <span class="token variable">$builder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name static-context">ProcessFilterAnalytics</span><span class="token operator">::</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token variable">$filterable</span><span class="token punctuation">,</span> <span class="token variable">$builder</span><span class="token operator">-&gt;</span><span class="token function">toSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Disable in production if not needed</strong>: If you&#39;re only using events for debugging, disable them in production:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token string single-quoted-string">&#39;events&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;enabled&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;FILTERABLE_EVENTS_ENABLED&#39;</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;production&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Use observers for filter-specific logic</strong>: Keep global listeners for cross-cutting concerns and use observers for filter-specific behavior.</p></li><li><p><strong>Always flush in tests</strong>: Prevent test pollution by flushing listeners in <code>tearDown()</code>:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">flushListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,132)]))}const c=s(p,[["render",l],["__file","events.html.vue"]]),r=JSON.parse('{"path":"/events.html","title":"Events","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Table of Contents","slug":"table-of-contents","link":"#table-of-contents","children":[]},{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[]},{"level":2,"title":"Available Events","slug":"available-events","link":"#available-events","children":[]},{"level":2,"title":"Registering Event Listeners","slug":"registering-event-listeners","link":"#registering-event-listeners","children":[{"level":3,"title":"Global Listeners","slug":"global-listeners","link":"#global-listeners","children":[]},{"level":3,"title":"Filter-Specific Observers","slug":"filter-specific-observers","link":"#filter-specific-observers","children":[]}]},{"level":2,"title":"Event Payloads","slug":"event-payloads","link":"#event-payloads","children":[{"level":3,"title":"filterable.initializing","slug":"filterable-initializing","link":"#filterable-initializing","children":[]},{"level":3,"title":"filterable.resolved","slug":"filterable-resolved","link":"#filterable-resolved","children":[]},{"level":3,"title":"filterable.applied","slug":"filterable-applied","link":"#filterable-applied","children":[]},{"level":3,"title":"filterable.failed","slug":"filterable-failed","link":"#filterable-failed","children":[]},{"level":3,"title":"filterable.finished","slug":"filterable-finished","link":"#filterable-finished","children":[]}]},{"level":2,"title":"Enabling/Disabling Events","slug":"enabling-disabling-events","link":"#enabling-disabling-events","children":[{"level":3,"title":"Global Configuration","slug":"global-configuration","link":"#global-configuration","children":[]},{"level":3,"title":"Per-Instance Control","slug":"per-instance-control","link":"#per-instance-control","children":[]},{"level":3,"title":"Conditional Event Control","slug":"conditional-event-control","link":"#conditional-event-control","children":[]}]},{"level":2,"title":"Use Cases","slug":"use-cases","link":"#use-cases","children":[{"level":3,"title":"1. Audit Logging","slug":"_1-audit-logging","link":"#_1-audit-logging","children":[]},{"level":3,"title":"2. Performance Monitoring","slug":"_2-performance-monitoring","link":"#_2-performance-monitoring","children":[]},{"level":3,"title":"3. Analytics & Metrics","slug":"_3-analytics-metrics","link":"#_3-analytics-metrics","children":[]},{"level":3,"title":"4. Error Notifications","slug":"_4-error-notifications","link":"#_4-error-notifications","children":[]},{"level":3,"title":"5. Cache Invalidation","slug":"_5-cache-invalidation","link":"#_5-cache-invalidation","children":[]},{"level":3,"title":"6. Development Debugging","slug":"_6-development-debugging","link":"#_6-development-debugging","children":[]}]},{"level":2,"title":"Exception Handling","slug":"exception-handling","link":"#exception-handling","children":[]},{"level":2,"title":"API Reference","slug":"api-reference","link":"#api-reference","children":[{"level":3,"title":"Static Methods","slug":"static-methods","link":"#static-methods","children":[]},{"level":3,"title":"Instance Methods","slug":"instance-methods","link":"#instance-methods","children":[]}]},{"level":2,"title":"Best Practices","slug":"best-practices","link":"#best-practices","children":[]}],"git":{"updatedTime":1760471848000,"contributors":[{"name":"kettasoft","email":"kettasoft@gmail.com","commits":1}]},"filePathRelative":"events.md"}');export{c as comp,r as data};
