import{_ as t,c as p,a as l,b as s,d as a,e as o,f as c,r as i,o as u}from"./app-BHXdpbhA.js";const r={};function k(d,n){const e=i("RouteLink");return u(),p("div",null,[n[9]||(n[9]=l(`<h1 id="conditional-logic-with-when-and-unless" tabindex="-1"><a class="header-anchor" href="#conditional-logic-with-when-and-unless"><span>Conditional logic with <code>when</code> and <code>unless</code></span></a></h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>The <code>when()</code> and <code>unless()</code> helpers let you conditionally modify a Filterable instance based on a boolean expression. They provide a fluent, chainable alternative to verbose if/else statements. Both methods modify the current instance and return <code>$this</code>, making them ideal for method chaining.</p><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api"><span>API</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">when</span><span class="token punctuation">(</span><span class="token keyword type-hint">bool</span> <span class="token variable">$condition</span><span class="token punctuation">,</span> <span class="token keyword type-hint">callable</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">static</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">unless</span><span class="token punctuation">(</span><span class="token keyword type-hint">bool</span> <span class="token variable">$condition</span><span class="token punctuation">,</span> <span class="token keyword type-hint">callable</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">static</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// The callback receives the current instance:</span></span>
<span class="line"><span class="token comment">// function (\\Kettasoft\\Filterable\\Filterable $filterable): void</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="basic-usage" tabindex="-1"><a class="header-anchor" href="#basic-usage"><span>Basic usage</span></a></h2><h3 id="when" tabindex="-1"><a class="header-anchor" href="#when"><span><code>when()</code></span></a></h3><p>Executes the callback only when the condition is true.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Filterable</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token variable">$isAdmin</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Filterable</span> <span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">setAllowedFields</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;role&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">boolean</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;strict&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">strict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unless" tabindex="-1"><a class="header-anchor" href="#unless"><span><code>unless()</code></span></a></h3><p>Executes the callback only when the condition is false (inverse of <code>when</code>).</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Filterable</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token variable">$isAdmin</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Filterable</span> <span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Non-admins get a restricted set of fields</span></span>
<span class="line">        <span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">setAllowedFields</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">boolean</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;include_inactive&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Apply additional constraints when a flag is NOT set</span></span>
<span class="line">        <span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">through</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$builder</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;active&#39;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can use short arrow functions for compact callbacks:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">,</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">permissive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="nesting-and-composition" tabindex="-1"><a class="header-anchor" href="#nesting-and-composition"><span>Nesting and composition</span></a></h2><p><code>when()</code> and <code>unless()</code> can be freely nested and combined.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token variable">$isAdmin</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">setAllowedFields</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;*&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token variable">$isReadonlyMode</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">sorting</span><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$s</span><span class="token operator">-&gt;</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">ignoreEmptyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token variable">$isGuest</span><span class="token punctuation">,</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">strict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="real-world-examples" tabindex="-1"><a class="header-anchor" href="#real-world-examples"><span>Real-world examples</span></a></h2><h3 id="role-based-field-access" tabindex="-1"><a class="header-anchor" href="#role-based-field-access"><span>Role-based field access</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">isAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">setAllowedFields</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;*&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">isAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">setAllowedFields</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="feature-flag-toggles" tabindex="-1"><a class="header-anchor" href="#feature-flag-toggles"><span>Feature flag toggles</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;features.relaxed_filtering&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">permissive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;features.allow_all_ops&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">allowdOperators</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;!=&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;like&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="behavior" tabindex="-1"><a class="header-anchor" href="#behavior"><span>Behavior</span></a></h2><ul><li><code>when($condition, $callback)</code> runs the callback only when <code>$condition === true</code>.</li><li><code>unless($condition, $callback)</code> runs the callback only when <code>$condition === false</code>.</li><li>In both cases, the same Filterable instance is returned (chainable, mutating API).</li><li>The callback receives the current instance and may call any configuration methods.</li><li>If the condition does not match, the callback is not executed.</li></ul><h2 id="tips" tabindex="-1"><a class="header-anchor" href="#tips"><span>Tips</span></a></h2><ul><li>Prefer <code>unless($cond)</code> when expressing negative intent (reads naturally).</li><li>Combine with <code>through()</code> for custom query tweaks that run only when needed.</li><li>Closures are evaluated lazily—only when their conditions match.</li><li>Keep callbacks small and focused for readability and testability.</li></ul><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also"><span>See also</span></a></h2>`,27)),s("ul",null,[s("li",null,[n[1]||(n[1]=a("API reference: ")),o(e,{to:"/api/filterable.html#flow-control"},{default:c(()=>n[0]||(n[0]=[s("code",null,"api/filterable.md",-1)])),_:1}),n[2]||(n[2]=a(" (methods: ")),n[3]||(n[3]=s("code",null,"when",-1)),n[4]||(n[4]=a(", ")),n[5]||(n[5]=s("code",null,"unless",-1)),n[6]||(n[6]=a(", ")),n[7]||(n[7]=s("code",null,"through",-1)),n[8]||(n[8]=a(")"))])])])}const h=t(r,[["render",k],["__file","conditional-logic.html.vue"]]),b=JSON.parse('{"path":"/features/conditional-logic.html","title":"Conditional logic with when and unless","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"API","slug":"api","link":"#api","children":[]},{"level":2,"title":"Basic usage","slug":"basic-usage","link":"#basic-usage","children":[{"level":3,"title":"when()","slug":"when","link":"#when","children":[]},{"level":3,"title":"unless()","slug":"unless","link":"#unless","children":[]}]},{"level":2,"title":"Nesting and composition","slug":"nesting-and-composition","link":"#nesting-and-composition","children":[]},{"level":2,"title":"Real-world examples","slug":"real-world-examples","link":"#real-world-examples","children":[{"level":3,"title":"Role-based field access","slug":"role-based-field-access","link":"#role-based-field-access","children":[]},{"level":3,"title":"Feature flag toggles","slug":"feature-flag-toggles","link":"#feature-flag-toggles","children":[]}]},{"level":2,"title":"Behavior","slug":"behavior","link":"#behavior","children":[]},{"level":2,"title":"Tips","slug":"tips","link":"#tips","children":[]},{"level":2,"title":"See also","slug":"see-also","link":"#see-also","children":[]}],"git":{"updatedTime":1760286783000,"contributors":[{"name":"kettasoft","email":"kettasoft@gmail.com","commits":1}]},"filePathRelative":"features/conditional-logic.md"}');export{h as comp,b as data};
