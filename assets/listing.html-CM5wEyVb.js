import{_ as s,c as l,a,o as i}from"./app-BzrB1Tdi.js";const n={};function t(r,e){return i(),l("div",null,e[0]||(e[0]=[a(`<h1 id="listing-all-filters" tabindex="-1"><a class="header-anchor" href="#listing-all-filters"><span>Listing All Filters</span></a></h1><h3 id="purpose" tabindex="-1"><a class="header-anchor" href="#purpose"><span><strong>Purpose</strong></span></a></h3><p>The <code>filterable:list</code> command scans your project for all <strong>Filterable classes</strong> (typically inside <code>app/Http/Filters</code>) and displays a concise overview of their configuration — including model association, allowed fields, allowed operators, and engine type.</p><p>It’s a convenient way to audit or debug all filters in your application at once.</p><hr><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span><strong>Usage</strong></span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">php artisan filterable:list</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="example-output" tabindex="-1"><a class="header-anchor" href="#example-output"><span><strong>Example Output</strong></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-------------+-------------------+--------------------------+--------------------+-------------------+</span>
<span class="line">| Filter      | Model             | Fields                   | Operators          | Engine            |</span>
<span class="line">+-------------+-------------------+--------------------------+--------------------+-------------------+</span>
<span class="line">| PostFilter  | App\\Models\\Post   | title, content, status   | =, !=, like, in    | Invokable         |</span>
<span class="line">| UserFilter  | App\\Models\\User   | name, email              | =, !=, like        | Ruleset           |</span>
<span class="line">| OrderFilter | App\\Models\\Order  | total, date, status      | =, &gt;, &lt;, between   | Tree              |</span>
<span class="line">+-------------+-------------------+--------------------------+--------------------+-------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="features" tabindex="-1"><a class="header-anchor" href="#features"><span><strong>Features</strong></span></a></h3><ul><li>Scans and lists all <strong>Filterable</strong> classes automatically.</li><li>Displays each filter’s <strong>model</strong>, <strong>fields</strong>, <strong>operators</strong>, and <strong>engine</strong>.</li><li>Helps quickly identify inconsistencies between filters.</li><li>Color-friendly tabular display that works well in any terminal.</li></ul><hr><h3 id="when-to-use" tabindex="-1"><a class="header-anchor" href="#when-to-use"><span><strong>When to Use</strong></span></a></h3><ul><li>To get an overview of all filters available in the application.</li><li>Before publishing or deploying, to verify that all filters are properly configured.</li><li>During debugging, to check for missing or incorrect field/operator setups.</li></ul><hr><h3 id="behavior" tabindex="-1"><a class="header-anchor" href="#behavior"><span><strong>Behavior</strong></span></a></h3><ul><li><p>Looks for classes inside the default <code>app/Http/Filters</code> directory (you can extend this logic in <code>CommandHelpers</code> if needed).</p></li><li><p>Only lists classes that extend <code>Kettasoft\\Filterable\\Filterable</code>.</p></li><li><p>If no filters are found, it displays:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">No filterable classes found.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><hr><h3 id="example-workflow" tabindex="-1"><a class="header-anchor" href="#example-workflow"><span><strong>Example Workflow</strong></span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">php artisan filterable:make-filter PostFilter <span class="token parameter variable">--filters</span><span class="token operator">=</span>title,status</span>
<span class="line">php artisan filterable:list</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, confirm that your new filter appears in the list.</p><hr><h3 id="notes" tabindex="-1"><a class="header-anchor" href="#notes"><span><strong>Notes</strong></span></a></h3><ul><li><p>Works great in combination with:</p><ul><li><code>filterable:inspect</code> → for detailed inspection of a single filter.</li><li><code>filterable:setup</code> → to ensure configuration and directories exist before listing.</li></ul></li></ul>`,26)]))}const d=s(n,[["render",t],["__file","listing.html.vue"]]),p=JSON.parse('{"path":"/cli/listing.html","title":"Listing All Filters","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Purpose","slug":"purpose","link":"#purpose","children":[]},{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":3,"title":"Example Output","slug":"example-output","link":"#example-output","children":[]},{"level":3,"title":"Features","slug":"features","link":"#features","children":[]},{"level":3,"title":"When to Use","slug":"when-to-use","link":"#when-to-use","children":[]},{"level":3,"title":"Behavior","slug":"behavior","link":"#behavior","children":[]},{"level":3,"title":"Example Workflow","slug":"example-workflow","link":"#example-workflow","children":[]},{"level":3,"title":"Notes","slug":"notes","link":"#notes","children":[]}],"git":{"updatedTime":1761371878000,"contributors":[{"name":"kettasoft","email":"kettasoft@gmail.com","commits":1}]},"filePathRelative":"cli/listing.md"}');export{d as comp,p as data};
