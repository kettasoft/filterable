import{_ as s,c as a,a as e,o as t}from"./app-B2UyhwSx.js";const p={};function l(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="ðŸ§ -how-it-works" tabindex="-1"><a class="header-anchor" href="#ðŸ§ -how-it-works"><span>ðŸ§  How It Works</span></a></h1><p>Filterable operates on a pluggable <strong>Engine-based architecture</strong>, giving you full control over how filters are interpreted and applied.</p><p>Each <strong>engine</strong> encapsulates a distinct filtering strategy â€” allowing you to choose the one that best fits your use case.</p><h2 id="engine-overview" tabindex="-1"><a class="header-anchor" href="#engine-overview"><span>Engine Overview</span></a></h2><table><thead><tr><th>Engine</th><th>Description</th></tr></thead><tbody><tr><td><a href="engines/rule-set"><code>Ruleset</code></a></td><td>Applies a flat array of key-operator-value pairs. Best for simple APIs or when using query strings.</td></tr><tr><td><a href="engines/invokable"><code>Invokable</code></a></td><td>Maps each filter key to a method on your filter class. Great for encapsulating filter logic per field.</td></tr><tr><td><a href="engines/expression"><code>Expression</code></a></td><td>Flexible and expressive filtering engine designed to handle both flat and deeply nested filters.</td></tr><tr><td><a href="engines/tree"><code>Tree</code></a></td><td>Supports nested and grouped logical filtering (<code>AND</code> / <code>OR</code>), ideal for advanced search scenarios.</td></tr></tbody></table><hr><h2 id="invokable-engine" tabindex="-1"><a class="header-anchor" href="#invokable-engine"><span>Invokable Engine</span></a></h2><p>The <strong>Invokable Engine</strong> maps each incoming filter key to a method within your custom filter class.</p><h3 id="example-filter-class" tabindex="-1"><a class="header-anchor" href="#example-filter-class"><span>Example Filter Class</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">PostFilter</span> <span class="token keyword">extends</span> <span class="token class-name">Filterable</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$filters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;status&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">status</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;status&#39;</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">title</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;like&#39;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;%<span class="token interpolation"><span class="token variable">$value</span></span>%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usage-in-controller" tabindex="-1"><a class="header-anchor" href="#usage-in-controller"><span>Usage in Controller</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token class-name type-declaration">PostFilter</span> <span class="token variable">$filter</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$posts</span> <span class="token operator">=</span> <span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">paginate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;posts.index&#39;</span><span class="token punctuation">,</span> <span class="token function">compact</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;posts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="expression-engine" tabindex="-1"><a class="header-anchor" href="#expression-engine"><span>Expression Engine</span></a></h2><p>Write custom SQL logic for filtering in a centralized callback.</p><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">filterUsing</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">,</span> <span class="token variable">$filters</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$filters</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;published&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;published_at&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;!=&#39;</span><span class="token punctuation">,</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$query</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="tree-engine" tabindex="-1"><a class="header-anchor" href="#tree-engine"><span>Tree Engine</span></a></h2><p>Ideal for complex filters with nested conditions.</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;and&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;operator&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eq&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;active&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;or&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">&quot;field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token property">&quot;operator&quot;</span><span class="token operator">:</span> <span class="token string">&quot;like&quot;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Laravel&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">&quot;field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;author.name&quot;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token property">&quot;operator&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eq&quot;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">useEngine</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;tree&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Supports relation filtering and nested depth control via configuration.</p>`,23)]))}const c=s(p,[["render",l],["__file","how-it-works.html.vue"]]),r=JSON.parse('{"path":"/how-it-works.html","title":"ðŸ§  How It Works","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Engine Overview","slug":"engine-overview","link":"#engine-overview","children":[]},{"level":2,"title":"Invokable Engine","slug":"invokable-engine","link":"#invokable-engine","children":[{"level":3,"title":"Example Filter Class","slug":"example-filter-class","link":"#example-filter-class","children":[]},{"level":3,"title":"Usage in Controller","slug":"usage-in-controller","link":"#usage-in-controller","children":[]}]},{"level":2,"title":"Expression Engine","slug":"expression-engine","link":"#expression-engine","children":[{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]}]},{"level":2,"title":"Tree Engine","slug":"tree-engine","link":"#tree-engine","children":[]}],"git":{"updatedTime":1748621419000,"contributors":[{"name":"Abdalrhman Emad Saad","email":"a.emad@codeclouders.com","commits":3}]},"filePathRelative":"how-it-works.md"}');export{c as comp,r as data};
