import{_ as t,c as s,a as e,o as a}from"./app-Cj092IKu.js";const o={};function i(l,n){return a(),s("div",null,n[0]||(n[0]=[e(`<h1 id="tree-based-engine" tabindex="-1"><a class="header-anchor" href="#tree-based-engine"><span>Tree Based Engine</span></a></h1><p>This engine allows for advanced query filtering using a logical tree structure with AND/OR grouping. It is ideal for complex, nested conditions that simulate SQL-like logical grouping.</p><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>The engine processes a nested JSON structure where each node is either:</p><ul><li>A logical group (and or or)</li><li>A filter condition</li></ul><p>This structure is then translated into an Eloquent query builder statement in Laravel.</p><h2 id="example-json-filter-request" tabindex="-1"><a class="header-anchor" href="#example-json-filter-request"><span>Example JSON Filter Request</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string double-quoted-string">&quot;filter&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string double-quoted-string">&quot;and&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span> <span class="token string double-quoted-string">&quot;field&quot;</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;status&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;operator&quot;</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;eq&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;value&quot;</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;active&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string double-quoted-string">&quot;or&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span></span>
<span class="line">          <span class="token punctuation">{</span> <span class="token string double-quoted-string">&quot;field&quot;</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;operator&quot;</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;gt&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;value&quot;</span><span class="token punctuation">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token punctuation">{</span> <span class="token string double-quoted-string">&quot;field&quot;</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;city&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;operator&quot;</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;eq&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;value&quot;</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;Cairo&quot;</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">//...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="config-options" tabindex="-1"><a class="header-anchor" href="#config-options"><span>Config Options</span></a></h2><table><thead><tr><th>Key</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>logic_operator</code></td><td>string</td><td>Default logic when none is provided (<code>and</code> or <code>or</code>)</td></tr><tr><td><code>allowed_operators</code></td><td>array</td><td>List of allowed operator aliases and their SQL equivalents</td></tr><tr><td><code>depth_limit</code></td><td>int/null</td><td>Maximum nesting level allowed for groups. Null for unlimited</td></tr><tr><td><code>normalize_keys</code></td><td>bool</td><td>Whether to convert field names to lowercase automatically</td></tr></tbody></table><h2 id="supported-operators" tabindex="-1"><a class="header-anchor" href="#supported-operators"><span>Supported Operators</span></a></h2><table><thead><tr><th>Alias</th><th>SQL Equivalent</th></tr></thead><tbody><tr><td><code>eq</code></td><td>=</td></tr><tr><td><code>neq</code></td><td>!=</td></tr><tr><td><code>gt</code></td><td>&gt;</td></tr><tr><td><code>lt</code></td><td>&lt;</td></tr><tr><td><code>gte</code></td><td>&gt;=</td></tr><tr><td><code>lte</code></td><td>&lt;=</td></tr><tr><td><code>like</code></td><td>like</td></tr><tr><td><code>nlike</code></td><td>not like</td></tr><tr><td><code>in</code></td><td>in</td></tr><tr><td><code>nin</code></td><td>not in</td></tr><tr><td><code>null</code></td><td>is null</td></tr><tr><td><code>notnull</code></td><td>is not null</td></tr><tr><td><code>between</code></td><td>between</td></tr></tbody></table><h2 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling"><span>Error Handling</span></a></h2><ul><li>An exception is thrown if:</li><li>The tree exceeds the depth_limit</li><li>An invalid or disallowed operator is used</li></ul>`,14)]))}const p=t(o,[["render",i],["__file","tree-based.html.vue"]]),r=JSON.parse('{"path":"/engines/tree-based.html","title":"Tree Based Engine","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"Example JSON Filter Request","slug":"example-json-filter-request","link":"#example-json-filter-request","children":[]},{"level":2,"title":"Config Options","slug":"config-options","link":"#config-options","children":[]},{"level":2,"title":"Supported Operators","slug":"supported-operators","link":"#supported-operators","children":[]},{"level":2,"title":"Error Handling","slug":"error-handling","link":"#error-handling","children":[]}],"git":{"updatedTime":1747728168000,"contributors":[{"name":"Abdalrhman Emad Saad","email":"a.emad@codeclouders.com","commits":1}]},"filePathRelative":"engines/tree-based.md"}');export{p as comp,r as data};
