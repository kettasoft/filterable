import{_ as s,c as a,a as e,o as t}from"./app-CLktT46g.js";const l={};function p(o,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="invoker-–-fluent-control-over-query-execution" tabindex="-1"><a class="header-anchor" href="#invoker-–-fluent-control-over-query-execution"><span>Invoker – Fluent Control Over Query Execution</span></a></h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>The <code>Invoker</code> class in the Filterable package is a smart execution wrapper that allows you to control the lifecycle of your query after applying filters. It is returned by the <code>Filterable::apply()</code> method and supports actions <strong>before</strong>, <strong>after</strong>, or <strong>on error</strong> during query execution.</p><hr><h2 id="purpose" tabindex="-1"><a class="header-anchor" href="#purpose"><span>Purpose</span></a></h2><p><code>Invoker</code> wraps the underlying query builder and enables:</p><ul><li>Executing callbacks <strong>before</strong> the query runs.</li><li>Handling results <strong>after</strong> the query runs.</li><li>Capturing <strong>errors</strong> and providing fallback logic.</li><li>Dispatching the query as a Laravel job.</li><li>Fluent chaining with <code>when</code> and <code>unless</code> conditions.</li></ul><hr><h2 id="usage-example" tabindex="-1"><a class="header-anchor" href="#usage-example"><span>Usage Example</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">beforeExecute</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$builder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token variable">$builder</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;is_active&#39;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">afterExecute</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Collection</span> <span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">onError</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$invoker</span><span class="token punctuation">,</span> <span class="token variable">$exception</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">report</span><span class="token punctuation">(</span><span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fallback</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- This will trigger the execution</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="public-methods" tabindex="-1"><a class="header-anchor" href="#public-methods"><span>Public Methods</span></a></h2><p><code>Invoker::init(QueryBuilderInterface $builder)</code></p><p>Create a new Invoker instance manually.</p><hr><h3 id="beforeexecute" tabindex="-1"><a class="header-anchor" href="#beforeexecute"><span>beforeExecute</span></a></h3><p><code>-&gt;beforeExecute(Closure $callback): static</code> Register a callback to be called before the query is executed.</p><p><strong>Parameters</strong>:</p><ul><li><code>Closure $callback</code>: Receives the internal query builder.</li></ul><hr><h3 id="afterexecute" tabindex="-1"><a class="header-anchor" href="#afterexecute"><span>afterExecute</span></a></h3><p><code>-&gt;afterExecute(Closure $callback): static</code> Register a callback to process or modify the result after execution.</p><p><strong>Parameters</strong>:</p><ul><li><code>Closure $callback</code>: Receives the result returned by the terminal method.</li></ul><hr><h3 id="onerror" tabindex="-1"><a class="header-anchor" href="#onerror"><span>onError</span></a></h3><p><code>-&gt;onError(Closure $callback): static</code> Register a callback to handle any exceptions that occur during query execution.</p><p><strong>Parameters</strong>: <code>Closure $callback</code>: Receives the Invoker and the thrown exception.</p><hr><h3 id="when" tabindex="-1"><a class="header-anchor" href="#when"><span>when</span></a></h3><p><code>-&gt;when(bool $condition, callable $callback): static</code> Conditionally apply logic to the Invoker chain.</p><hr><h3 id="unless" tabindex="-1"><a class="header-anchor" href="#unless"><span>unless</span></a></h3><p><code>-&gt;unless(bool $condition, callable $callback): static</code> The inverse of when.</p><hr><h3 id="asjob" tabindex="-1"><a class="header-anchor" href="#asjob"><span>asJob</span></a></h3><p><code>-&gt;asJob(string $jobClass, array $data = [], ?string $queue = null): mixed</code> Dispatch the query execution as a Laravel job.</p><p><strong>Parameters</strong>:</p><ul><li><code>string $jobClass</code>: The name of the job class to dispatch.</li><li><code>array $data</code>: Optional additional data.</li><li><code>string|null $queue</code>: Optional queue name.</li></ul><hr><h3 id="when-invoker-is-skipped" tabindex="-1"><a class="header-anchor" href="#when-invoker-is-skipped"><span>When Invoker is Skipped</span></a></h3><p>In some advanced use cases, the <code>Invoker</code> wrapper will be <strong>skipped</strong>, and the <code>apply()</code> method will return the query builder directly.</p><p>This happens in two cases:</p><ol><li>If the target class implements the <code>ShouldReturnQueryBuilder</code> interface:</li></ol><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Filters</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Filterable</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Kettasoft<span class="token punctuation">\\</span>Filterable<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>ShouldReturnQueryBuilder</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">PostFilter</span> <span class="token keyword">extends</span> <span class="token class-name">Filterable</span> <span class="token keyword">implements</span> <span class="token class-name">ShouldReturnQueryBuilder</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>If you explicitly call the <code>shouldReturnQueryBuilder()</code> method before calling a terminal method.</li></ol><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token class-name static-context">Filterable</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">shouldReturnQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &lt;- Returns Query builder directly</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is useful when you want to bypass Invoker&#39;s control layer and interact with the builder as usual.</p><hr><p>Notes: The job class must accept an <code>invoker</code> key in its constructor data.</p><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p><code>Invoker</code> is your <strong>last-mile control layer</strong> before the query is executed. It&#39;s ideal for:</p><ul><li>Logging</li><li>Result transformation</li><li>Fallbacks</li><li>Background execution</li></ul><p>This gives Filterable a clean and powerful <strong>declarative style</strong>.</p>`,53)]))}const i=s(l,[["render",p],["__file","invoker.html.vue"]]),r=JSON.parse('{"path":"/execution/invoker.html","title":"Invoker – Fluent Control Over Query Execution","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"Purpose","slug":"purpose","link":"#purpose","children":[]},{"level":2,"title":"Usage Example","slug":"usage-example","link":"#usage-example","children":[]},{"level":2,"title":"Public Methods","slug":"public-methods","link":"#public-methods","children":[{"level":3,"title":"beforeExecute","slug":"beforeexecute","link":"#beforeexecute","children":[]},{"level":3,"title":"afterExecute","slug":"afterexecute","link":"#afterexecute","children":[]},{"level":3,"title":"onError","slug":"onerror","link":"#onerror","children":[]},{"level":3,"title":"when","slug":"when","link":"#when","children":[]},{"level":3,"title":"unless","slug":"unless","link":"#unless","children":[]},{"level":3,"title":"asJob","slug":"asjob","link":"#asjob","children":[]},{"level":3,"title":"When Invoker is Skipped","slug":"when-invoker-is-skipped","link":"#when-invoker-is-skipped","children":[]}]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{"updatedTime":1754113653000,"contributors":[{"name":"Abdalrhman Emad Saad","email":"a.emad@codeclouders.com","commits":1}]},"filePathRelative":"execution/invoker.md"}');export{i as comp,r as data};
